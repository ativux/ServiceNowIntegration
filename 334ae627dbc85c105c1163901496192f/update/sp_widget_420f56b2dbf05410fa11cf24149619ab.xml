<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>standard</category>
        <client_script><![CDATA[function spTicketConversation($scope, nowAttachmentHandler, $animate, $rootScope, cabrillo, $timeout, snRecordWatcher, spUtil, spAriaUtil, $http, $window, snAttachmentHandler, i18n, dynamicTranslation) {
	$scope.showLocationIcon = false;
	$scope.msg = "";
	$scope.isNative = cabrillo.isNative();
	$scope.errorMessages = [];
	var existingEntries = {};
	var c = this;
	c.comment = '';
	c.submitting = false;
	c.needComment = false;

	var skipNextRecordWatchUpdate = false;
	$scope.typing = [];
	if (!$scope.data.hasReadableJournalField && !$scope.data.isNewRecord)
		console.warn("No readable journal field (comments, work notes, etc.) available in the stream for this record");
	if ($scope.page && $scope.page.g_form)
		hideParentJournalFields();

	function hideParentJournalFields() {
		if (!$scope.data.stream)
			return;
		var fields = $scope.data.stream.journal_fields;
		var g_form = $scope.page.g_form;
		for (var f in fields)
			g_form.setDisplay(fields[f].name, false);
	}
	var liveProfiles = {};
	liveProfiles[$scope.user.sys_id] = {
		userID: $scope.user.sys_id,
		name: $scope.user.name,
		initials: $window.NOW.user_initials
	};
	if ($window.NOW.user_avatar) {
		liveProfiles[$scope.user.sys_id].userImage = $window.NOW.user_avatar;
	}

	$scope.getLiveProfileByUserId = function (userId){
		return liveProfiles[userId];
	}

	var pending = {};

	//Little caching implementation to make sure we only get a given user's profile once.
	$scope.hasLiveProfile = function hasLiveProfile(userId){
		if (!userId)
			return false;

		if (liveProfiles[userId])
			return true;

		if (pending[userId])
			return false;

		pending[userId] = $http.get('/api/now/live/profiles/sys_user.' + userId).then(function (response) {
			liveProfiles[userId] = {
				userID: userId,
				name: response.data.result.name,
				initials: buildInitials(response.data.result.name),
				avatar: response.data.result.avatar
			};
		});
		return false;
	}

	function buildInitials(name) {
		if (!name)
			return "--";

		var initials = name.split(" ").map(function(word) {
			return word.toUpperCase();
		}).filter(function(word) {
			return word.match(/^[A-Z]/);
		}).map(function(word) {
			return word.substring(0,1);
		}).join("");

		return (initials.length > 3) ? initials.substr(0, 3) : initials;
	}


	function setupAttachmentHandler(){
		$scope.attachmentHandler = new nowAttachmentHandler(attachSuccess, appendError);

		function attachSuccess() {
			$rootScope.$broadcast("sp.attachments.update", $scope.data.sys_id);
			spAriaUtil.sendLiveMessage($scope.data.attachAddedMsg);
		}

		function appendError(error) {
			spUtil.addErrorMessage(error.msg + error.fileName);
			$scope.errorMessages.push(error);
			spAriaUtil.sendLiveMessage($scope.data.attachFailMsg);
		}

		$timeout(function() {
			$scope.attachmentHandler.setParams($scope.data.table, $scope.data.sys_id, 1024 * 1024 * $scope.data.maxAttachmentSize);
		})
	}
	setupAttachmentHandler();

	var recordWatcherTimer;
	$scope.$on('record.updated', function(name, data) {
		// Use record watcher update if:
		//	This record was updated AND This widget didn't trigger the update.
		if (data.table_name == $scope.data.table && data.sys_id == $scope.data.sys_id){
			$timeout.cancel(recordWatcherTimer);
			recordWatcherTimer = $timeout(function(){
				if (skipNextRecordWatchUpdate)
					skipNextRecordWatchUpdate = false;
				else
					spUtil.update($scope).then(function(r){
						$scope.data.stream = r.stream;
					});
			}, 250);
		}
	});

	$scope.$on('sp.show_location_icon', function(evt) {
		$scope.data.showLocationIcon = true;
	});

	$scope.$on('attachment.updated', function(evt,options) {
		if ($scope.data.sys_id != -1 && options.sys_id == $scope.data.sys_id)
			updateAttachmentState($scope.data.table, $scope.data.sys_id);
	});


	function updateAttachmentState(table, sys_id) {
		c.server.update().then(function (data) {
			if (!data.stream || !data.stream.entries)
				return;
			var newEntries = data.stream.entries;
			var currEntries = $scope.data.mergedEntries;
			var oldSize = currEntries ? currEntries.length : 0;
			var newSize = newEntries.length;
			for (var i = 0; i < oldSize; i++) {
				if (!currEntries[i].attachment)
					continue;
				for (var j = 0; j < newSize; j++) {
					if (currEntries[i].sys_id == newEntries[j].sys_id && newEntries[j].attachment) {
						currEntries[i].attachment.state = newEntries[j].attachment.state;
						break;
					}
				}
			}
		});
	}

	$scope.scanAttachment = function(attachment){
		snAttachmentHandler.scanAttachment(attachment);
	}

	$rootScope.$on('sp.sessions', function(evt, sessions) {
		$scope.typing = [];
		Object.keys(sessions).forEach(function (session) {
			var journalFields = scope.data.stream.journal_fields;
			var canUserReadJournalField = false;
			session = sessions[session];

			for (var j = 0; j < journalFields.length; j++) {
				if (journalFields[j].name === session.field_type) {
					canUserReadJournalField = journalFields[j].can_read;
					break;
				}									
			}

			if (session.status === 'typing' && canUserReadJournalField)
				$scope.typing.push(session);
			else
				return;

		})
	})

	$scope.$on('sp.conversation_title.changed', function(evt, text) {
		$scope.data.ticketTitle = text;
	})

	$scope.$watch("data.canWrite", function() {
		$rootScope.$broadcast("sp.record.can_write", $scope.data.canWrite);
	});

	var streamUpdateTimer;
	$scope.$watch("data.stream", function() {
		$timeout.cancel(streamUpdateTimer);
		streamUpdateTimer = $timeout(function() {
			mergeStreamEntries();
		}, 50);
	});

	function mergeStreamEntries() {
		$scope.placeholder = $scope.data.placeholderNoEntries;
		if (!$scope.data.stream || !$scope.data.stream.entries)
			return;

		$scope.placeholder = $scope.data.placeholder;
		var entries = $scope.data.stream.entries;
		if (!$scope.data.mergedEntries) {
			$scope.data.mergedEntries = $scope.data.stream.entries.slice();
			for (var i = 0; i < entries.length; i++) {
				existingEntries[entries[i].sys_id] = true;
			}

			return;
		}

		var mergedEntries = $scope.data.mergedEntries;
		for (var i = entries.length-1; i >= 0; i--) {
			var curEntry = entries[i];
			if (isNewEntry(mergedEntries, curEntry)){
				mergedEntries.unshift(curEntry);
				existingEntries[curEntry.sys_id] = true;
			}
		}
	}

	function isNewEntry(mergedEntries, item) {
		for (var i=0; i < mergedEntries.length; i++) {
			if (mergedEntries[i].sys_id === item.sys_id) {
				return false;
			}
		}
		return true;
	}

	$scope.getPlaceholder = function() {
		if ($scope.data.use_dynamic_placeholder && $scope.data.useSecondaryJournalField)
			return $scope.data.secondaryJournalField.label;
		return $scope.placeholder;
	};

	var colorCache;
	$scope.getFieldColor = function(fieldName) {
		var defaultColor = "transparent";
		if (colorCache) {
			if (fieldName in colorCache)
				return colorCache[fieldName];
			else
				return defaultColor;
		}

		colorCache = {};
		var jf = $scope.data.stream.journal_fields;
		for (var i=0; i<jf.length;i++) {
			colorCache[jf[i].name] = jf[i].color || defaultColor;
		}
		return $scope.getFieldColor(fieldName);
	}

	$scope.checkInLocation = function() {
		$rootScope.$broadcast("check_in_location");
		$rootScope.$broadcast("location.sharing.start");
	}

	$scope.$on("location.sharing.end", function() {
		$timeout(function() {$scope.msg = ""}, 500);
	})

	$scope.$on("location.sharing.start", function() {
		$scope.msg = $scope.data.sharingLocMsg;
	})

	$scope.scanBarcode = function() {
		$rootScope.$broadcast("scan_barcode");
	}

	$scope.$on("attachment.upload.start", function() {
		$scope.data.isPosting = true;
		$scope.msg = $scope.data.uploadingAttachmentMsg;
	})

	$scope.$on("attachment.upload.stop", function() {
		$scope.data.isPosting = false;
		$scope.msg = "";
		//update the stream so we get the new attachment
		spUtil.update($scope).then(function(r) {
			$scope.data.stream = r.stream;
		});
	});

	$scope.data.isPosting = false;

	$scope.postEntry = function(input) {
		c.submitting = true;
		if(input){
			c.needComment = false;	
			post(input);
		} else{
			c.needComment = true;
		}
	};

	function post(input) {
		if(c.data.color_class == "color_category2"){
			$rootScope.$broadcast("refreshNotificationListCSC", c.data.sys_id);
		}else{
			$rootScope.$broadcast("refreshNotificationList", c.data.sys_id);
		}
		
		if ($scope.data.isPosting)
			return;

		if (!input)
			return;

		input = input.trim();
		$scope.data.journalEntry = input;

		if ($scope.data.useSecondaryJournalField)
			$scope.data.journalEntryField = $scope.data.secondaryJournalField.name;
		else
			$scope.data.journalEntryField = $scope.data.primaryJournalField.name;
		$scope.data.isPosting = true;
		spUtil.update($scope).then(function(){
			$scope.data.isPosting = false;
			reset();
			spAriaUtil.sendLiveMessage($scope.data.messagePostedMsg);
			$timeout(function() {
				$scope.setFocus(); // sets focus back on input, defined in "link"
			});
		});
		skipNextRecordWatchUpdate = true;
		$scope.setFocus(); // sets focus back on input, defined in "link"
	}

	var reset = function(){
		$scope.userTyping("");
		$scope.data.journalEntry = "";
		$scope.updateFormWithJournalFields();
		$scope.data.useSecondaryJournalField = false;
		$scope.data.journalEntryField = "";
	}

	$scope.keyPress = function(event) {
		if ($scope.data.isPosting) {
			if (event.keyCode === 13 && !event.shiftKey)
				event.preventDefault();
			return;
		}

		if ($scope.data.enterKeyAddsNewLine)
			return; // must click Send button to submit

		if (event.keyCode === 13 && !event.shiftKey) {
			event.preventDefault();
			$timeout(function() {
				if ($scope.data.journalEntry)
					$scope.postEntry($scope.data.journalEntry);
			}, 250);
		}
	}

	$scope.userTyping = function(input) {
		var status = "viewing";
		if (input.length)
			status = "typing";

		var field = $scope.data.useSecondaryJournalField ? $scope.data.secondaryJournalField.name : $scope.data.primaryJournalField.name;
		$scope.$emit("record.typing", {status: status, value: input, table: $scope.data.table, sys_id: $scope.data.sys_id, field_type: field});
		$scope.updateFormWithJournalFields();
	}
	$scope.updateFormWithJournalFields = function () {
		var fieldName, fieldToClear = "";
		if ($scope.data.useSecondaryJournalField) {
			fieldName = $scope.data.secondaryJournalField.name;
			fieldToClear = $scope.data.primaryJournalField.name;
		} else {
			fieldName = $scope.data.primaryJournalField.name;
			fieldToClear = "";
		}
		$scope.$emit("activity_stream_is_changed", {"fieldName": fieldName, "fieldToClear": fieldToClear, "input": $scope.data.journalEntry});
	}

	$scope.toggleTranslation = function(e) {
		e.showDetails = !e.showDetails;
		var translationObject = c.data.translation;
		e.toggleMsg = e.showDetails ? translationObject.hideMsg : translationObject.showMsg;
	};

	$scope.getTranslatedText = function(translations) {
		if (!(Array.isArray(translations)))
			return;
		var translatedText;
		var translationsLength = translations.length;
		for (var index = 0; index < translationsLength; index++) {
			if (translations[index].targetLanguage === g_lang) {
				translatedText = translations[index].translatedText;
				break;
			}
		}
		return translatedText;
	};

	$scope.getAdditionalParameters = function(e, isRetry) {
		return {
			'event': {
				'eventName': 'Activity Stream - Portal',
				'fieldType': e.element,
				'retry': isRetry
			},
			'additionalParameters': [{
				'parameterName': 'textType',
				'parameterValue': 'html'
			}, {
				'parameterName': 'escapeHtml',
				'parameterValue': e.contains_code
			}]
		};
	}

	$scope.showTranslationInProgress = function(e) {
		e.showTranslation = true;
		e.isTranslationInProgress = true;
		e.isTranslationSuccess = false;
		e.isTranslationError = false;
	}

	$scope.showTranslationSuccess = function(e, translatedText, credits) {
		e.translatedText = translatedText;
		e.credits = credits;
		e.toggleMsg = c.data.translation.hideMsg;
		e.isTranslationInProgress = false;
		e.isTranslationSuccess = true;
		e.isTranslationError = false;
		e.showDetails = true;
	}

	$scope.showTranslationError = function(e, errorMessage, tryAgain) {
		e.isTranslationInProgress = false;
		e.isTranslationSuccess = false;
		e.isTranslationError = true;
		e.translatedText = errorMessage;
		e.tryAgain = tryAgain;
	}

	$scope.translateText = function(e, isRetry) {
		$scope.showTranslationInProgress(e);
		var translationObject = c.data.translation;
		dynamicTranslation.getTranslation(e.value, $scope.getAdditionalParameters(e, isRetry)).then(
			function(successResponse) {
				if (successResponse.detectedLanguage.code === g_lang) {
					$scope.showTranslationError(e, translationObject.sameLanguageErrorMsg, false);
					return;
				}
				var translatedText = $scope.getTranslatedText(successResponse.translations);
				if (translatedText) {
					var credits = i18n.format(translationObject.creditsMsg, successResponse.translator);
					$scope.showTranslationSuccess(e, translatedText, credits);
				} else {
					translatedText = translationObject.genericErrorMsg;
					$scope.showTranslationError(e, translatedText, true);
				}
			},
			function(errorResponse) {
				var errorCode = errorResponse.code;
				var errorMessage;
				var showRetry = false;
				switch (errorCode) {
					case '40052':
						errorMessage = translationObject.maxLengthErrorMsg;
						break;
					case '40055':
						errorMessage = translationObject.credentialsErrorMsg;
						break;
					case '40053':
					case '40054':
					case '40056':
						errorMessage = translationObject.langNotSupportedErrorMsg;
						break;
					default:
						errorMessage = translationObject.genericErrorMsg;
						showRetry = true;
				}
				$scope.showTranslationError(e, errorMessage, showRetry);
			}
		);
	}

	c.showForm = function(){
		$('#moreDetailsModal').modal("show");
	}

	c.goToItem = function(){
		if(c.data.table != "sc_task" && c.data.table != "incident"){
			$scope.$emit("selectTabRequest", c.data.item_id, "csc");
		}
		else{
			$scope.$emit("selectTabRequest", c.data.item_id, "it");
		}
	}
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.content_conversation_all {
  .conversation_title {
    text-transform: uppercase;
    font-size: 14px;
    font-family: '$text-bolder';
  }
  .activity_content {
    height: 260px;
    overflow: auto;
    margin-bottom: 20px;
    margin-left: -4px;
    padding-left: 4px;
  }
  .timeline {
    padding-top: 0;
  }
  .timeline:before {
    top: 8px;
    border-right: 2px solid $slate-gray;
    right: 100%;
    height: calc(100% - 80px);
    z-index: 2;
  }
  .conversation_entries {
    padding-left: 30px;

    .conversation_mark {
      width: 10px;
      height: 10px;
      border-radius: 5px;
      background-color: white;
      border: 1px solid $deep-sky-blue;
      position: absolute;
      top: 5px;
      left: -4px;
      z-index: 3;
    }
    .hide_timeline_property{
      background: white;
      height: 100%;
      width: 10px;
      z-index: 4;
      position: absolute;
      left: -4px;
    }
    .new_radio_mark{
      width: 10px;
      height: 10px;
      border-radius: 5px;
      background-color: white;
      border: 1px solid $deep-sky-blue;
      position: absolute;
      top: 5px;
      left: -4px;
      z-index: 5;
    }
  }
  .conversation_entries:first-child {
    .conversation_action {
      text-decoration: underline;
    }
  }
  .conversation_entries:last-child {
    .conversation_mark {
      background-color: $deep-sky-blue;
    }
  }
  .conversation_fixed {
    position: sticky;
    top: 0;
    background: white;
    z-index: 1;
  }
  .content_conversation_dynamic {
    height: 260px;
    overflow: auto;
  }

  .conversation_action {
    font-size: 12px;
    color: $deep-sky-blue;
    font-family: $text-bold;
  }
  .conversation_description {
    font-size: 12px;
    color: $slate-gray;
  }
  .conversation_date {
    font-size: 10px;
  }

  .conversation_form {
    margin-left: 30px;

    .conversation_user {
      margin-left: -46px;

      img {
        width: 36px;
        height: 36px;
      }
      .user_name {
        margin-left: 7px;
        font-family: $text-bold;
      }
    }

    .submit_name {
      text-transform: uppercase;
      margin-left: 8px;
      color: $deep-sky-blue;
      font-size: 18px;
      font-family: $text-bold;
    }

    textarea {
      min-height: 80px;
      margin-bottom: 20px;
      border: 2px solid $deep-sky-blue;
    }
  }
}

.content_conversation {
  padding-bottom: 50px;

  .number_title {
    .ticket_number {
      font-size: 12px;
    }
    .ticket_title {
      font-size: 16px;
      text-decoration: underline;
      font-family: $text-bold;
    }
  }

  .avatar_list {
    padding-left: 15px;
  }
  .avatar-custom-size {
    float: left;
  }

  .avatar-container {
    cursor: default;
  }
  .avatar {
    height: 40px !important;
    width: 40px !important;
    margin-top: -10px;
  }
  .avatar-container.avatar-large .avatar.soloAvatar .sub-avatar{
    background: white;
    border: solid 2px $deep-sky-blue;
    border-radius: 50%;
    line-height: 4rem;

    span {
      font-family: $text-bold;
      color: $deep-sky-blue;
    }
  }
  .all-avatar {
    .avatar-container .avatar.soloAvatar {
      .sub-avatar {
        color: white !important;
        background: white !important;
        border: solid 2px $deep-sky-blue !important;
        border-radius: 50% !important;
      }
    }
  }


  .history-name-size {
    font-family: $text-bold;
  }


  .time-text {
    font-size: 10px;
    margin-left: 49px;
    margin-top: -8px;
  }

  .message_user {
    img {
      height: 40px;
    }
    .user_name {
      font-family: $text-bold;
      margin-left: 5px;
    }
  }

  .form-control {
    overflow-x: hidden !important;
    overflow-wrap: break-word !important;
    height: 120px !important;
    width: 400px;
    border: solid 2px #00BFFF;
    margin: 0 66px !important;
  }

  .conversation_form {

    input[type="image"] {
      width: 50px;
      height: 50px;
      margin-right: 65px;
      margin-top: 10px;
    }
  }

  .attach_button {
    float: left;
    margin-left: 42px;
    margin-right: -18px;
    transform: scaleX(-1);

    .glyphicon-paperclip {
      color: $deep-sky-blue;
      transform: rotate(135deg);
      font-size: 22px;
    }
  }
  .attach_title {
    margin-left: 5px;
    margin-top: -40px;
    color: $deep-sky-blue;
    font-family: $text-bold;
    text-transform: uppercase;
  }
}


.panel-title {
  display: inline;
}

.panel-title-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.panel-title-icons {

  ul {
    display: flex;
    align-items: center;
    padding: 0;
    margin: 0;
  }
  li {
    padding: 0;
    margin: 0;

    .panel-button {
      display: flex;
      align-items: center;
      margin: 0 0 0 15px;
      line-height: initial;

      &amp;:hover, &amp;:focus {
        text-decoration: none;
      }
    }
  }
}


.timeline-heading test {
  float:right;
}

.timeline-body &gt; p {
  white-space: pre-wrap;
  overflow-x: hidden;
}

.timeline-body ul &gt; li {
  float: none;
}

.no-resize {
  resize: none;
}

.journal-field-indicator {
  width: 5px;
  left: 5px;
  top: 5px;
  bottom: 5px;
  z-index: 3;
}

.panel-heading {
  word-wrap: break-word;
}

ul {
  list-style: none;
}

.overflow-hidden {
  overflow: hidden;
}


.timeline-badge-wrap {
  margin: auto;
  max-width: 115px;
}

.timeline-badge.success {
  background-color: $success;
}

.timeline-badge {
  position: relative;
  left:25%;
  width:50%;
  padding-bottom:50%;
  border-radius:50%;
}

.timeline-badge span {
  top:50%;
  left: 50%;
  transform: translate(-50%, -50%);
  font-size:13px;
  color: #fff;
}

.journal-type {
  display: inline-flex;
  display: -ms-inline-flexbox;
  flex-wrap: wrap;
  -webkit-justify-content: flex-end;
}

.fa-circle {
  font-size: 4px;
  padding: 7px;
}

@media (max-width: 768px) {
  .timeline-badge-wrap {
    margin: 0;
  }
  .timeline-badge {
    left: 10%;
  }
}

.translation-font {
  font-size: 12px;
}

.translate-link {
  cursor: pointer;
  @extend .translation-font;
}

.translation-credits {
  font-style: italic;
}

.translation-message {
  padding-top: 10px;
  font-size: 14px;
  white-space: pre-wrap;
}

.toggle-link-show {
  display: none;
}

.translation-credits {
  font-style: italic;
}

.translation-icon {
  width: 12px;
  height: 12px;
  padding-right: 4px;
  @extend .translation-font;
}

.translation-container {
  border: 1px solid $well-border;
  border-radius: 3px;
  background-color: $well-bg;
  padding: 10px;
  color: $text-color;
  margin-top: 10px;
  @extend .translation-font;
}

.translation-delimiter {
  padding: 7px;
  @extend .translation-font;
}

.translate-wrap {
  white-space: nowrap;
}

//Changed, not OOTB
.white-circle{
  height: 40px !important;
  width: 40px !important;
  line-height: 4.8rem;
  background: white;
  border: solid 2px $deep-sky-blue;
  border-radius: 50%;
  left: 25px !important;
}

.request-history-title {
  color: #708090;
  font-family: $text-bold;
  font-size: 24px;
}

.title-info {
  color: $deep-sky-blue;
  font-family: $text-bold;
  font-size: 16px;
}

.modal-body{
  overflow: hidden !important;
  border: 20px solid white;
  .wrapper-xl {
    padding: 50px 0 50px 80px !important
      margin-right: -20px;
  }
  button{
    text-align: right;
    font-size: 42px;
  }
  .title_property{
    font-size: 32px;
  }
  .turn_bold{
    font-weight: bold;
  }
  .color_change{
    color: $deep-sky-blue;
  }
}

/* Template Notifications */
.content_notifications {
  .content_conversation {
    .attach_button {
      margin-left: 60px;
    }
    .attach_title {
      margin-top: 20px;
    }
    .submit_button {
      position: absolute;
      left: 360px;
    }
  }
}

/* Tooltips */
.tooltip {
  position: absolute;
  visibility: hidden;
  opacity: 0;
  transition: .2s ease-in-out;
  padding: 5px 10px;
  white-space: nowrap;
  z-index: 1;
}
.tooltip_right {
  top: calc(50% - 15px);
  right: 40%;
}

//Hover
.conversation_action:hover {
  .tooltip {
    visibility: visible;
    opacity: 1;
    color: white;
    background-color: $slate-gray;
  }
}

.submit_button {
  transition: .4s ease-in-out;
  &amp;:hover {
    transition: .2s ease-in-out;
    transform: scale(1.1);
    -webkit-transform: scale(1.1);
    -ms-transform: scale(1.1);
    -moz-transform: scale(1.1);
    -o-transform: scale(1.1);
  }
}

.sub-avatar {
  background-size: contain !important;
}

.mandatory_message {
  color: $coral;
  font-family: $text-bold;
}

.mask_submitting{
  background: white;
  position: absolute;
  height: 100%;
  width: 100%;
  opacity: 0.5;
  z-index: 10;
}

.no_merged_entries {
  height: 56px;
}

.conversation_attach {
  display: flex;

  .img-responsive {
    max-height: 40px;
    margin-right: 5px;
  }
}

.dynamic_color_category2 {
  .sub-avatar {
    border: solid 2px $globo-purple !important;
    span{ color: $globo-purple !important; }
  }
  strong {
    color: $globo-purple !important;
  }
}
.color_category2 {
  .glyphicon-paperclip {
    color: $globo-purple !important;
  }
}</css>
        <data_table>sp_instance</data_table>
        <demo_data>{"options": {
	"sys_id": -1,
		"table": "incident"
	}
}</demo_data>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>gservice_ticket_conversation</id>
        <internal>false</internal>
        <link><![CDATA[function(scope, elm) {
	// Set the focus back on the input for IE11
	scope.setFocus = function() {
		var input = $(elm[0]).find('textarea#post-input');
		if (input[0])
			input[0].focus();
	}
}]]></link>
        <name>GService Ticket Conversations</name>
        <option_schema>[{"hint":"Enter key behavior is specified by system property (glide.service_portal.comment.enter_adds_newline) unless overridden here","name":"enter_key_behavior","section":"Behavior","default_value":"System property","label":"Enter key behavior","type":"choice","choices":[{"label":"System property","value":"System property"},{"label":"Submit","value":"Submit"},{"label":"New line","value":"New line"}]},{"hint":"What is the table of the record?","name":"table","section":"Data","label":"Table","type":"string"},{"hint":"What is the sys_id of the record?","name":"sys_id","section":"Data","label":"Sys_ID","type":"string"},{"hint":"Placeholder text shows selected journal field","name":"use_dynamic_placeholder","section":"Behavior","label":"Use dynamic placeholder","type":"boolean"},{"hint":"Message to show when record has no readable journal field","name":"no_readable_journal_field_message","default_value":"","section":"Presentation","label":"No readable journal field message","type":"string"},{"hint":"Get the template based on the tab","name":"tab","section":"Behavior","label":"Tab Template","type":"string"},{"name":"item_status","section":"Behavior","label":"Item Status","type":"string"},{"name":"color_class","section":"Presentation","label":"Color Class","type":"string"},{"name":"bd_color_class","section":"Presentation","label":"BD Color Class","type":"string"},{"name":"comment_image","section":"Presentation","label":"Comment Image","type":"string"},{"name":"send_image","section":"Presentation","label":"Send Image","type":"string"}]</option_schema>
        <public>false</public>
        <roles>snc_external,snc_internal</roles>
        <script><![CDATA[(function() {
	//Code not OOTB
	data.hide = false;
	var localInput = input;
	var portalUtils = new global.OCLPortalUtils();
	//Used to get the current user sys_id
	var userID = gs.getUser().getID();
	data.user_id = userID;
	data.username = gs.getUserDisplayName();
	data.statusEntries = [];
	
	
	data.color_class = options.color_class || "color_category1_old";
	data.bd_color_class = options.bd_color_class || "bdcolor_category1_old";
	data.send_image = options.send_image || "gservice_dashboard_submit.png";
	data.comment_image = options.comment_image || "gservice_message.png";

	data.currentUserID = gs.getUserID();
	data.maxAttachmentSize = parseInt(gs.getProperty("com.glide.attachment.max_size", 1024));
	if (isNaN(data.maxAttachmentSize))
		data.maxAttachmentSize = 24;
	data.uploadingAttachmentMsg = gs.getMessage("Uploading attachment...");
	data.sharingLocMsg = gs.getMessage("Sharing location...");
	data.scanBarcodeMsg = gs.getMessage("Scan barcode");
	data.checkInLocMsg = gs.getMessage("Check in location");
	data.messagePostedMsg = gs.getMessage("Message has been sent");
	data.viewMsg = gs.getMessage("View");
	data.attachAddedMsg = gs.getMessage("Attachment added");
	data.attachFailMsg = gs.getMessage("Failed to add attachment");
	data.scanFailedMsg = gs.getMessage("File failed security scan");
	//Sys_ID of the record producer - EDITION MADE BELOW
	data.sys_id = (input && input.sys_id) || options.sys_id || $sp.getParameter("sys_id");
	data.item_status = options.item_status;
	//Table of the record producer - EDITION MADE BELOW
	data.table = (input && input.table) || options.table || $sp.getParameter("table");
	// don't use options.title unless sys_id and table also come from options
	if (options && options.sys_id && options.table)
		data.ticketTitle = options.title;
	data.placeholder = options.placeholder || gs.getMessage("Type your message here...");
	data.placeholderNoEntries = options.placeholderNoEntries || gs.getMessage("Type your message here...");
	data.btnLabel = options.btnLabel || gs.getMessage("Send");
	data.includeExtended = options.includeExtended || false;
	data.use_dynamic_placeholder = options.use_dynamic_placeholder;
	data.hideAttachmentBtn = options.hideAttachmentBtn;
	
	var translationLuaParameters = {
		'event': {
			'eventName': 'Activity Stream - Portal'
		}
	};
	var isDynamicTranslationInstalled = GlidePluginManager.isActive("com.glide.dynamic_translation");
	if (isDynamicTranslationInstalled) {
		var isDynamicTranslationEnabled	= sn_dt_api.DynamicTranslation.isEnabled(translationLuaParameters);
		data.isTranslationEnabled = isDynamicTranslationEnabled && isDynamicTranslationEnabled.translation;
		if(data.isTranslationEnabled)
			initDynamicTranslation();
	}

	function initDynamicTranslation() {
		var translation = {};
		translation.translateLinkMsg = gs.getMessage("Translate");
		translation.sameLanguageErrorMsg = gs.getMessage("This content is written in your preferred language. No need to translate.");
		translation.genericErrorMsg = gs.getMessage("Unable to translate.");
		translation.credentialsErrorMsg = gs.getMessage("Credentials are missing or invalid. Contact your administrator.");
		translation.maxLengthErrorMsg = gs.getMessage("Text has exceeded the maximum length.");
		translation.langNotSupportedErrorMsg = gs.getMessage("Text cannot be translated to your preferred language.");
		translation.creditsMsg = gs.getMessage("Translated by {0}");
		translation.translationProgressMsg = gs.getMessage("Translating...");
		translation.hideMsg = gs.getMessage("Hide");
		translation.showMsg = gs.getMessage("Show");
		translation.tryAgainMsg = gs.getMessage("Try Again");
		data.translation = translation;
	}

	data.enterKeyAddsNewLine = false;
	if (options.enter_key_behavior == "System property")
		data.enterKeyAddsNewLine = gs.getProperty("glide.service_portal.comment.enter_adds_newline") == "true";
	else if (options.enter_key_behavior == "New line")
		data.enterKeyAddsNewLine = true;
	
	var gr = portalUtils.getRecord(data.table, data.sys_id);
	
	data.variables = new global.GlobalServiceCatalogUtil().getVariablesForTask(gr, true);

	data.isNewRecord = data.sys_id == -1 || gr.isNewRecord();
	data.table = gr.getRecordClassName(); // use actual table for the record
	options.no_readable_journal_field_message = options.no_readable_journal_field_message || gs.getMessage("No readable comment field");
	if(data.table == "sc_task"){
		data.number = gr.getDisplayValue("request_item");
		data.ticketTitle = gr.request_item.getRefRecord().getDisplayValue("cat_item");
		data.item_id = gr.getValue("request_item");
	}
	else{
		data.number = gr.getDisplayValue('number');
		data.item_id = gr.getUniqueValue();
	}

	var created_on = gr.getDisplayValue('sys_created_on');
	created_on = created_on.split(' ');
	data.createdDate = created_on[0].replace(/-/g, "/");
	data.createdTime = created_on[1];

	if (input) { // if we have input then we're saving
		if (input.journalEntry && input.journalEntryField){
			if (gr.canWrite(input.journalEntryField)){
				gr[input.journalEntryField].setDisplayValue(input.journalEntry);
				gr.update();
				$sp.logStat('Comments', data.table, data.sys_id, input.journalEntry);
			}
		}
		data.ticketTitle = input.ticketTitle;
		data.placeholder = input.placeholder;
		data.btnLabel = input.btnLabel;
		data.includeExtended = input.includeExtended;
	} else {
		data.statusEntries = portalUtils.getStateChange(data.sys_id);
		if (!data.ticketTitle) {
			if (gr.short_description.canRead())
				data.ticketTitle = gr.getDisplayValue("short_description");
			if (!data.ticketTitle)
				data.ticketTitle = data.number;
			
		}

		$sp.logStat('Task View', data.table, data.sys_id);
	}

	data.canWrite = gr.canWrite();
	data.canAttach = userCanAttach(gr);
	data.canRead = gr.canRead();
	
	data.hasWritableJournalField = false;
	data.hasReadableJournalField = false;

	if (data.canRead && !data.isNewRecord) {
		//data.stream = $sp.getStream(data.table, data.sys_id);
		data.stream = portalUtils.getStream(data.table, data.sys_id, $sp);
		// Journal fields come in correct order already
		// so grab the first 2 writeable fields
		if ('journal_fields' in data.stream) {
			var jf = data.stream.journal_fields;
			for(var i=0; i < jf.length; i++){
				if (jf[i].can_read === true)
					data.hasReadableJournalField = true;
				if (jf[i].can_write === true){
					data.hasWritableJournalField = true;
					if (!data.primaryJournalField)
						data.primaryJournalField = jf[i];
					else if (data.includeExtended && !data.secondaryJournalField)
						data.secondaryJournalField = jf[i];
					else
						break;
				}
			}
		}

	}

	data.tableLabel = gr.getLabel();

	function userCanAttach(originalRecord) {
		if (!gs.hasRole(gs.getProperty("glide.attachment.role")))
			return false;

		// To check whether user can upload attachments, need to check "no_attachment" table
		// attribute of the target record (e.g., incident vs. task), so fetch it if we need to.
		// GlideRecordScriptUtil.getRealRecord is not available to scoped apps, so can't use it.
		var targetRecordForAttributes = originalRecord;
		if (originalRecord.getRecordClassName() != originalRecord.getTableName()) {
			targetRecordForAttributes = new GlideRecord(originalRecord.getRecordClassName());
			targetRecordForAttributes.get(originalRecord.getUniqueValue());
		}
		return targetRecordForAttributes.getAttribute("no_attachment") != "true";
	}

	data.ticketInfo = portalUtils.getTicketInfo(data.table, data.sys_id);

	var gservice_ticket_attachment_options = {record_table : data.table,
																						record_id : data.sys_id};
	data.gservice_ticket_attachment = $sp.getWidget('gservice_ticket_attachments', gservice_ticket_attachment_options);

})()]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>organize.henrique</sys_created_by>
        <sys_created_on>2020-05-19 14:34:49</sys_created_on>
        <sys_id>420f56b2dbf05410fa11cf24149619ab</sys_id>
        <sys_mod_count>491</sys_mod_count>
        <sys_name>GService Ticket Conversations</sys_name>
        <sys_package display_value="ITSM Service Portal" source="x_gmeps_itsm_servi">334ae627dbc85c105c1163901496192f</sys_package>
        <sys_policy/>
        <sys_scope display_value="ITSM Service Portal">334ae627dbc85c105c1163901496192f</sys_scope>
        <sys_update_name>sp_widget_420f56b2dbf05410fa11cf24149619ab</sys_update_name>
        <sys_updated_by>organize.fernando</sys_updated_by>
        <sys_updated_on>2020-09-04 17:05:55</sys_updated_on>
        <template><![CDATA[<div class="content_notifications dynamic_{{data.color_class}}" ng-if="data.canRead && !data.isNewRecord && !data.hide">
  <div class="mask_submitting" ng-show="c.submitting"/>
  <div class="content_conversation">
    <div class="panel-heading panel-title-container">
      <div class="number_title" ng-click="c.goToItem()">
        <div class="ticket_number">{{data.number}}</div>
        <div class="ticket_title">{{data.ticketTitle}}</div>
      </div>
    </div>

    <div class="panel-body">
      <div class="no_merged_entries" ng-if="data.mergedEntries.length == 0">
      </div>
      <div ng-if="data.hasReadableJournalField">
        <div class="row">
          <ul role="list" class="avatar_list" aria-label="${Ticket history}">
            <li ng-repeat="e in data.mergedEntries | limitTo : 1">
              <sn-avatar ng-if="hasLiveProfile(e.user_sys_id)" primary="getLiveProfileByUserId(e.user_sys_id)" class="avatar-large avatar-custom-size" show-presence="false" enable-context-menu="false">
              </sn-avatar>
              <div class="history-name-size">{{e.name}}</div>
              <div>
                <p ng-if="(e.element != 'attachment')" ng-bind-html="e.value"></p>
                <div class="conversation_attach" ng-if="(e.element == 'attachment')">
                  <a ng-if="(e.attachment.state == 'available')" target="_blank" href="/sys_attachment.do?view=true&sys_id={{e.attachment.sys_id}}" title="${View}">
                    <img ng-if="e.attachment.thumbnail_path" alt="" ng-src="/{{e.attachment.path}}?t=medium" class="img-responsive"/>
                  </a>
                  <a ng-if="(e.attachment.state == '' || e.attachment.state == 'pending' || e.attachment.state == 'available_conditionally')" ng-click="scanAttachment(e.attachment)" href="javascript:void(0)" title="${View}">
                    <img ng-if="e.attachment.thumbnail_path" alt="" ng-src="/{{e.attachment.path}}?t=medium" class="img-responsive"/>
                  </a>
                  <div>
                    <div ng-if="(e.attachment.state == 'available')">
                      <a href="/sys_attachment.do?sys_id={{e.attachment.sys_id}}" target="_blank" title="{{dataViewMsg}}"><strong>{{e.attachment.file_name}}</strong></a><br/>
                      {{e.attachment.size}}
                    </div>
                    <div ng-if="(e.attachment.state == 'not_available')">
                      <span title="{{dataViewMsg}}" class="not_available">{{e.attachment.file_name}}</span><br/>
                      <span class="error">{{data.scanFailedMsg}}</span>
                    </div>
                    <div ng-if="(e.attachment.state == '' || e.attachment.state == 'pending' || e.attachment.state == 'available_conditionally')">
                      <a href="javascript:void(0)" ng-click="scanAttachment(e.attachment)" title="{{dataViewMsg}}"><strong>{{e.attachment.file_name}}</strong></a><br/>
                      {{e.attachment.size}}
                    </div>
                  </div>
                </div>
              </div>
              <div class="time-text">{{e.sys_created_on_adjusted}}</div>
            </li>
          </ul>
        </div>
        <div class="message_user">
          <img src="{{data.comment_image}}">
          <span class="user_name">{{data.username}}</span>
        </div>
        <form ng-submit="postEntry(data.journalEntry)">
          <div ng-show="data.hasWritableJournalField" class="conversation_form">
            <span ng-if="c.needComment" class="mandatory_message">${É necessário um comentário para responder a essa pendência}</span>
            <textarea ng-keypress="keyPress($event)" sn-resize-height="trim" rows="1" class="form-control no-resize overflow-hidden {{data.bd_color_class}}" ng-model='data.journalEntry' ng-model-options='{debounce: 250}' ng-attr-placeholder="{{getPlaceholder()}}" aria-label="{{getPlaceholder()}}" autocomplete="off" ng-change="userTyping(data.journalEntry)"/>
            <span class="journal-field-indicator" ng-style="({'background-color': data.useSecondaryJournalField ? data.secondaryJournalField.color : data.primaryJournalField.color})"></span>
            <input class="submit_button" ng-disabled="c.submitting" type="image" src="{{data.send_image}}" ng-disabled="data.isPosting" value="{{data.btnLabel}}" style="cursor: pointer"/>
          </div>
        </form>
        <div ng-if="(!data.hideAttachmentBtn)" class="attach_text">
          <sp-attachment-button ng-if="data.canWrite && data.canAttach" class="attach_button {{data.color_class}}">
          </sp-attachment-button>
          <div class="attach_title {{data.color_class}}">${Add attachments}</div>
          <now-attachments-list class="attachment-list" template="sp_attachment_single_line" >
          </now-attachments-list>
        </div>
      </div>  
    </div>

    <div ng-if="!data.hasReadableJournalField">
      {{options.no_readable_journal_field_message}}
    </div>

  </div>

  <div class="modal fade modal_article" id="moreDetailsApprovalsModal" tabindex="-1" role="dialog" aria-labelledby="articleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
      <div class="modal-content">
        <div class="modal-body">
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
          <div class="panel-body wrapper-xl">
            <span class="turn_bold color_change title_property">${Solicitação} ${#}{{data.ticketInfo.ticketNumber}}</span>
            <div class="turn_bold color_change">${Data de Abertura}: {{data.ticketInfo.openedAt}}</div>
            <div><span class="turn_bold">${Resumo da solicitação}: </span>{{data.ticketInfo.summary}}</div>
            <div class="turn_bold color_change">${Detalhes da solicitação}:</div>
            <div ng-repeat="variable in data.variables">
              <span class="turn_bold">{{variable.label}} : </span>{{variable.display_value}}
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

</div>]]></template>
    </sp_widget>
</record_update>
