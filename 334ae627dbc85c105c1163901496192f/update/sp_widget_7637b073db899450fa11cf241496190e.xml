<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope, $rootScope, $timeout, snAttachmentHandler, $http, i18n, categorySubscribe, $element, spUtil, $window) {

	var c = this;
	c.isLoading = true;
	c.index = 0;

	$scope.loadingIndicator = $rootScope.loadingIndicator;
	//Show widget after loaded
	$scope.$on('sp_loading_indicator', function(e, value) {
		if($scope.loadingIndicator && !value){
			c.isLoading = false;
		}
		$scope.loadingIndicator = value;
	});

	//Upload user image
	$scope.avatarProfile = {
		userID: $scope.user.sys_id,
		name: $scope.user.name,
		initials: $window.NOW.user_initials
	};

	if ($window.NOW.user_avatar) {
		$scope.avatarProfile.userImage = $window.NOW.user_avatar;
	}

	$rootScope.$on('sp.avatar_changed', function() {
		if ($window.NOW.user_avatar) {
			$scope.avatarProfile.userImage = $window.NOW.user_avatar;
		}
	});

	var fieldExcludes = {
		sys_user: [ 'name', 
							 'introduction', 
							 'title', 
							 'department',
							 'location',
							 'photo',
							 'manager',
							 'company'],
		live_profile: ['short_description', 'photo']
	}

	$scope.uploadNewProfilePicture = function($event) {
		$event.stopPropagation();
		if($event.keyCode === 9) {
			return;
		}
		var $el = $element.find('input[type=file]');
		$el.click();
	}

	$scope.attachFiles = function(files) {
		var file = files.files[0];

		var validImage = false;

		switch(file.type) {
			case 'image/jpeg':
			case 'image/png':
			case 'image/bmp':
			case 'image/x-windows-bmp':
			case 'image/gif':
			case 'image/x-icon':
			case 'image/svg+xml':
				validImage = true;
				break;
			default:
				break;
		}

		if(!validImage) {
			c.data.action = 'sendMsg';
			c.data.msg = file.name + " " + i18n.getMessage("isn't a recognized image file format");
			c.server.update().then(function(){
				c.data.action = '';
				return;
			});
			//alert(file.name + " " + i18n.getMessage("isn't a recognized image file format"));
		}

		snAttachmentHandler.create("live_profile", $scope.data.liveProfileID).uploadAttachment(file, {
			sysparm_fieldname: "photo"
		}).then(function(response) {
			var obj = {};
			obj.newAvatarId = response.sys_id;
			$scope.avatarPicture = {
				'background-image': "url('" + response.sys_id + ".iix')",
				'color': 'transparent'
			};
			$rootScope.$broadcast("sp.avatar_changed", obj);
		});
	}

	$scope.avatarPicture = "";

	$http.get('/api/now/live/profiles/sys_user.' + $scope.data.sysUserID).then(function (response) {
		if (response.data.result && response.data.result.avatar){
			var avatarPicture = response.data.result.avatar.replace("?t=small", "");
			$scope.avatarPicture = {
				'background-image': "url('" + avatarPicture + "')",
				'color': 'transparent'
			};
		}
	});

	spUtil.recordWatch($scope, "sys_user", "sys_id=" + $scope.data.sysUserID);
	spUtil.recordWatch($scope, "live_profile", "sys_id=" + $scope.data.liveProfileID);
	//End of user upload image

	c.data.newNotificationAvailable = false;

	spUtil.recordWatch($scope, "sc_task", c.data.taskQuery, function(event) {
		c.refreshNotificationsCount(event.data);
	});

	spUtil.recordWatch($scope, "incident", c.data.incidentQuery, function(event) {
		c.refreshNotificationsCount(event.data);
	});

	spUtil.recordWatch($scope, "sysapproval_approver", c.data.approverQuery, function(event) {
		c.refreshApprovalsCount();
	});

	spUtil.recordWatch($scope, "sysapproval_approver", c.data.approverQueryCSC, function(event) {
		c.refreshApprovalsCount();
	});

	spUtil.recordWatch($scope, "x_gmeps_csc_csc", c.data.cscQuery, function(event) {
		c.refreshNotificationsCount(event.data);
	});

	c.refreshNotificationsCount = function(item){
		c.server.get({
			action: "notificationsCount",
			taskQuery: c.data.taskQuery,
			incidentQuery : c.data.incidentQuery,
			cscQuery : c.data.cscQuery
		}).then(function(response) {
			c.data.notificationsCount = response.data.notificationsCount;
			c.refreshNotifications(item);
		});
	}

	c.refreshNotifications = function(item){
		if(c.index == 1){
			if(item.record.state.value == "3" || item.record.state.value == "-5"){
				for(i in item.changes){
					if(item.changes[i] == "state"){
						c.data.newNotificationAvailable = true;
					}
				}
			}
		}
	}

	c.refreshApprovalsCount = function(){
		c.server.get({
			action: "approvalsCount",
			approverQuery : c.data.approverQuery,
			approverQueryCSC : c.data.approverQueryCSC
		}).then(function(response) {
			c.data.approvalsCount = response.data.approvalsCount;
		});
	}

	c.selectTab = function(tab, index){
		c.index = index;
		c.isLoading = true;
		//Var used to show notification modal
		c.data.newNotificationAvailable = false;

		for(var i in c.data.tabs){
			if(c.data.tabs[i].name == tab.name){
				c.data.tabs[i].selected = true;
			}
			else{
				c.data.tabs[i].selected = false;
			}
		}
		c.server.get({
			action: "selectedTab",
			widgets: c.data.widgets,
			index: index
		}).then(function(response) {
			c.data.widgets = response.data.widgets;
			if(tab.name == "approvalsTab"){
				$timeout(function(){
					$scope.$broadcast("hideDetails");
				}, 100);

			}
		});
	}

	$scope.$on('selectTabRequest', function(event, item_id, source) {
		c.index = 0;
		c.isLoading = true;
		c.data.newNotificationAvailable = false;

		for(var i in c.data.tabs){
			if(i == 0){
				c.data.tabs[i].selected = true;
			}
			else{
				c.data.tabs[i].selected = false;
			}
		}
		c.server.get({
			action: "selectedTab",
			widgets: c.data.widgets,
			index: c.index
		}).then(function(response) {
			c.data.widgets = response.data.widgets;
			$timeout(function(){
				if(source == "csc"){
					$scope.$broadcast("selectRequestCSC", item_id);
				}
				else{
					$scope.$broadcast("selectRequest", item_id);
				}

			}, 100);
		});
	});

}]]></client_script>
        <controller_as>c</controller_as>
        <css>.content {
  background-color: white;
  padding: 0 90px;
  padding-top: 30px;
  padding-bottom: 30px;
  margin-bottom: 15px;

  .header-loader{
    padding: 50px;
    padding-bottom: 100px;

    .sp-loading-indicator{
      color: $blue !important;
    }
  }

  .content_avatar {
    display: flex;

    .avatar-image {
      margin-top: -10px;

      a {
        .avatar-custom-size {
          margin-top: 15px;
          margin-bottom: 30px;
          height: 90px;
          width: 90px;
          box-shadow: 0 0 0 4px $blue;
          font-size: 20px !important;

          &amp;:hover {
            .tooltip {
              visibility: visible;
              opacity: 1;
            }
          }
        }
        .avatar-container .avatar.soloAvatar .sub-avatar {
          border-radius: 0;
          font-size: 50px;
          line-height: 95px;
          font-family: $text-bold;
          background-color: white;
          color: $blue;
        }
      }
    }

    .user-info-properties {
      margin-left: 5px;
      color: $slate-gray;

      .name-properties {
        font-size: 30px;
        font-family: $text-bold;
        color: $blue;
        letter-spacing: -1px;
      }
      .job-properties {
        color: $dodger-blue;
        font-size: 14px;
      }
      .location-properties {
        text-transform: uppercase;
      }
    }
  }

  .tabs-align {
    display: flex;

    .categories {
      width: 25%;
      position: relative;

      .tab_items {
        transition: .4s ease-in-out;
        display: flex;
        flex-direction: column;
        align-items: center;

        .tab_images {
          transition: .4s ease-in-out;
          width: 80px;
          height: 80px;
          display: flex;
          justify-content: center;
          position: relative;

          .count-align {
            z-index: 1;
            position: absolute;
            width: 20px;
            height: 20px;
            top: 0;
            left: 70px;
            color: white;
            background: $coral;
            border-radius: 50%;
            text-align: center;
            font-family: $text-bolder;
          }

          .sound {
            width: 80px;
            height: 80px;
            position: absolute;
            text-align: center;

            .sound_left, .sound_right {
              transition: .5s ease-out !important;
              background: white;
              position: absolute;
              width: 20px;
              height: 58px;
              z-index: 1;
            }
            .sound_left {
              top: 0;
              left: 0;
            }
            .sound_right {
              top: 0;
              right: 0;
            }
          }

          .coffee {
            transition: 1s ease-out !important;
            background: white;
            width: 100%;
            height: 34px;
            z-index: 1;
          }

          .icon-img {
            transition: .4s ease-in-out;
            width: 80px;
            height: 80px;
            position: absolute;
            text-align: center;
          }
        }
        .tab_title {
          transition: .4s ease-in-out;
          font-size: 14px;
          font-family: $text-bolder;
          text-align: center;
          text-transform: uppercase;
          line-height: 1.4;
          width: 150px;
          margin: inherit;
          margin-top: 10px;
        }
        &amp;:hover {
          .icon-img {
            transition: .2s ease-in-out;
            transform: scale(1.1);
            -webkit-transform: scale(1.1);
            -ms-transform: scale(1.1);
            -moz-transform: scale(1.1);
            -o-transform: scale(1.1);
          }
          .tab_title {
            transition: .2s ease-in-out;
            transform: translateY(-10px);
            -webkit-transform: translateY(-10px);
            -ms-transform: translateY(-10px);
            -moz-transform: translateY(-10px);
            -o-transform: translateY(-10px);
            color: $blue;
          }
        }
      }
      .tab_current {
        color: $blue;
      }
    }
    .categories:nth-child(1) {
      .tab_items {
        .tab_title { width: 90px; }
      }
    }
    .categories:nth-child(2) {
      .tab_items {
        &amp;:hover {
          .tab_images {
            .sound {
              .sound_left {
                left: -14px;
              }
              .sound_right {
                right: -14px;
              }
            }
          }
        }
      }
    }
    .categories:nth-child(4) {
      .tab_items {
        .tab_title { width: 155px; }

        &amp;:hover {
          .tab_images {
            .coffee {
              height: 0;
            }
          }
        }
      }
    }
  }
}

.text-align {
  text-align: center;
  padding-bottom: 30px;
}
.margin-align {
  margin: 0 auto;
  text-align: center;
}

.notification-align {
  font-size: 12px;
  font-family: $text-bold;
  line-height: 1;

  .tooltip {
    visibility: visible;
    opacity: 1;
  }
  .tooltip_top {
    top: -41px;
    left: -17px;
  }
}
.line {
  width: 100%;
  height: 2px;
  background-color: $blue;
  margin-top: 30px;
}
.tooltip_top {
  top: -46px;
  left: -37px;
}

@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
  .content {
    .tabs-align {
      .categories {
        .tab_items {
          .tab_images {
            img {
              margin-left: -40px;
            }
            .coffee {
              display: none;
            }
          }
        }
      }
    }
  }
}

@media only screen and (max-width: 768px) {

  .content{
    padding: 0 20px;
    padding-bottom: 30px;
  }

  .content_avatar{
    display: none !important;
  }

  .tabs-align{
    .categories {
      width: 50% !important;
    }
    .categories:nth-child(2), .categories:nth-child(4) {
      display: none;
    }
  }

}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>gservice_my_dashboard_tabs_v2</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>GService My  Dashboard Tabs v2</name>
        <option_schema>[{"displayValue":"Category","hint":"Selecione a categoria que deseja exibir","name":"selected_category","display_value_list":[],"section":"Data","label":"Category","type":"glide_list","value":"sc_category","ed":{"reference":"sc_category"}}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	var localInput = input;
	var portalUtils = new global.OCLPortalUtils();
	var portalUtilsCSC = new global.OCLPortalUtilsCSC(); 

	data.msg = '';
	if(localInput){
		if(localInput.action == "sendMsg"){
			gs.addErrorMessage(localInput.msg);
			return;
		}
	}

	if(!localInput){

		data.widgets = [];
		var requestWidget = {show : true,
												 widget1 : $sp.getWidget('gservice_my_dashboard_requests'),
												 widget2 : $sp.getWidget('gservice_my_dashboard_requests_csc')};
		var notificationWidget = {show : false,
															widget1 : $sp.getWidget('gservice_my_dashboard_notification_v2'),
															widget2 : $sp.getWidget("gservice_my_dashboard_notification_csc")};
		var approvalsWidget = {show : false,
													 widget1 : $sp.getWidget('gservice_my_dashboard_approvals_v2'),
													 widget2 : $sp.getWidget("gservice_my_dashboard_approvals_csc")};
		var assetsWidget = {show : false,
												widget1 : $sp.getWidget('gservice_my_dashboard_assets')};
		var mostReqWidget = {show : false,
												 widget1 : $sp.getWidget('gservice_my_dashboard_most_req_v2'),
												 widget2 : $sp.getWidget("gservice_my_dashboard_most_req_csc")};
		data.widgets.push(requestWidget);
		data.widgets.push(notificationWidget);
		data.widgets.push(approvalsWidget);
		data.widgets.push(assetsWidget);
		data.widgets.push(mostReqWidget);

		//Used to get the current user sys_id
		var userID = gs.getUser().getID();
		data.user_id = userID;

		//Get the current user information
		var grUserInfo = new GlideRecord ("sys_user");
		grUserInfo.get(data.user_id);
		data.name = grUserInfo.getValue("first_name");
		data.title = grUserInfo.getValue("title");
		data.email = grUserInfo.getValue("email");
		data.phone = grUserInfo.getValue("mobile_phone");
		data.location = grUserInfo.getDisplayValue("location");

		var tabs = gs.getProperty("gservice_dashboard_tabs").split("|");
		data.tabs = [];
		for(i in tabs){
			var tab = JSON.parse(tabs[i]);
			if(tab.show == false && tab.name != "assetsTab"){
				tab.show = (gs.getUser().hasRole("approver_user") || gs.getUser().hasRole("itil"));
			}
			data.tabs.push(tab);
			data.tabs[i].label = gs.getMessage(tab.label);
		}

		var delegateUsersNotification = [];
		var delegateUsersApproval = [];
		var grDelegate = new GlideRecord("sys_user_delegate");
		grDelegate.addQuery("delegate", gs.getUserID());
		var qc = grDelegate.addQuery("u_pending_requests", true);
		qc.addOrCondition("approvals", true);
		grDelegate.query();
		if(grDelegate.next()){
			do{
				if(grDelegate.getValue("u_pending_requests") == 1){
					delegateUsersNotification.push(grDelegate.getValue("user"));
				}
				if(grDelegate.getValue("approvals") == 1){
					delegateUsersApproval.push(grDelegate.getValue("user"));
				}

			} while(grDelegate.next());
		}
		var queries = portalUtils.getNotificationQuery();
		data.taskQuery = queries.taskQuery;
		data.incidentQuery = queries.incidentQuery;
		data.approverQuery = portalUtils.getApproverQuery();
		data.approverQueryCSC = "state=requested^source_tableSTARTSWITHx_gmeps_csc^approver.sys_idIN" + gs.getUserID();
		data.cscQuery = "requester="+ gs.getUserID() +"^ORopened_by="+ gs.getUserID() +"^u_status_portal=3";


		data.notificationsCount = portalUtils.setNotificationsCount(data.taskQuery, data.incidentQuery);
		data.notificationsCount += portalUtilsCSC.setNotificationsCount(data.cscQuery);
		data.approvalsCount = portalUtils.setApprovalsCount(data.approverQuery);
		data.approvalsCount += portalUtils.setApprovalsCount(data.approverQueryCSC);
	}

	else{
		switch(localInput.action){
			case "selectedTab":
				data.widgets = localInput.widgets;
				for(i in data.widgets){
					data.widgets[i].show = i == localInput.index ? true : false;
				}
				if(localInput.index == 1){
					var notificationWidget = {show : true,
																		widget1 : $sp.getWidget('gservice_my_dashboard_notification_v2'),
																		widget2 : $sp.getWidget("gservice_my_dashboard_notification_csc")};
					data.widgets[1] = notificationWidget;
				}
				break;
			case "notificationsCount":
				data.notificationsCount = portalUtils.setNotificationsCount(localInput.taskQuery, localInput.incidentQuery);
				data.notificationsCount += portalUtilsCSC.setNotificationsCount(localInput.cscQuery);
				break;
			case "approvalsCount":
				data.approvalsCount = portalUtils.setApprovalsCount(localInput.approverQuery);
				data.approvalsCount += portalUtils.setApprovalsCount(localInput.approverQueryCSC);
				break;
		}
	}

	//Upload user image
	data.sysUserID = $sp.getParameter("sys_id");
	if (!data.sysUserID)
		data.sysUserID = gs.getUser().getID();
	var sysUserGR = new GlideRecord("sys_user");
	data.userExists = sysUserGR.get(data.sysUserID) && sysUserGR.canRead();

	if (data.userExists) {
		var loggedInSysUserID = gs.getUser().getID();
		data.liveProfileID = "";

		if (GlidePluginManager().isActive('com.glideapp.live_common')) {
			var liveProfileGR = new GlideRecord("live_profile");
			liveProfileGR.addQuery("document", data.sysUserID);
			liveProfileGR.query();
			if (liveProfileGR.next()) {
				data.liveProfileID = liveProfileGR.getValue("sys_id");
				data.liveProfileModel = $sp.getForm("live_profile", data.liveProfileID)._fields;
			}
		}
	}
	//End of user image upload

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>organize.fernando</sys_created_by>
        <sys_created_on>2020-06-03 19:50:55</sys_created_on>
        <sys_id>7637b073db899450fa11cf241496190e</sys_id>
        <sys_mod_count>291</sys_mod_count>
        <sys_name>GService My  Dashboard Tabs v2</sys_name>
        <sys_package display_value="ITSM Service Portal" source="x_gmeps_itsm_servi">334ae627dbc85c105c1163901496192f</sys_package>
        <sys_policy/>
        <sys_scope display_value="ITSM Service Portal">334ae627dbc85c105c1163901496192f</sys_scope>
        <sys_update_name>sp_widget_7637b073db899450fa11cf241496190e</sys_update_name>
        <sys_updated_by>organize.jorge.garcia</sys_updated_by>
        <sys_updated_on>2020-12-14 11:27:25</sys_updated_on>
        <template><![CDATA[<div class="content" id="widget-category-items">
  
  <div class="content_avatar">
    <div class="avatar-image">
      <input ng-show="false" type="file" ng-file-select="attachFiles({files: $files})" 
             accept="image/jpeg,image/png,image/bmp,image/x-windows-bmp,image/gif,image/x-icon,image/svg+xml"/>
      <a title="Avatar Pic" ng-click="uploadNewProfilePicture($event)"
         ng-keypress="uploadNewProfilePicture($event)" class="btn btn-default send-message avatar-custom-size">
        <sn-avatar class="avatar-custom-size" primary="avatarProfile">
          <span class="tooltip tooltip_top">
            <div class="tooltip_text">${Clique para alterar seu avatar}</div>
            <div class="tooltip_arrow arrow_bottom"></div>
          </span>
        </sn-avatar>
      </a>
    </div>
    <div class="user-info-properties">
      <div class="name-properties">{{data.name}}</div>
      <div class="job-properties">{{data.title}}</div>
      <div>{{data.email}}</div>
      <div>{{data.phone}}</div>
      <div class="location-properties">{{data.location}}</div>
    </div>
  </div>
  
  <div class="tabs-align">

    <div class="categories" ng-repeat="tab in data.tabs" ng-if="tab.show">

      <div class="tab_items" ng-class="{'tab_current': tab.selected}" ng-click="c.selectTab(tab, $index)">

        <span class="notification-align" ng-if="c.data.newNotificationAvailable && tab.name == 'notificationsTab'">
          <span class="tooltip tooltip_top">
            <div class="tooltip_text">${Você possui novas notificações, atualize a página ou reabra o menu}</div>
            <div class="tooltip_arrow arrow_bottom"></div>
          </span>
        </span>
        <div class="tab_images">
          <span class="count-align" ng-if="data.notificationsCount > 0 && tab.name == 'notificationsTab'"> {{data.notificationsCount}} </span>
          <span class="count-align" ng-if="data.approvalsCount > 0 && tab.name == 'approvalsTab'"> {{data.approvalsCount}} </span>
          <div class="sound" ng-if="$index == 1" ng-hide="true"> <!-- tab.selected -->
            <div class="sound_left"></div>
            <div class="sound_right"></div>
          </div>
          <div class="coffee" ng-if="$index == 4" ng-hide="tab.selected"></div>
          <img ng-show="!tab.selected" src="{{tab.img}}" class="icon-img"/>
          <img ng-show="tab.selected" src="{{tab.imgSelected}}" class="icon-img"/>
        </div>

        <div class="tab_title">{{tab.label}}</div>

      </div>

    </div>

  </div>
  <div class="header-loader" ng-show="c.isLoading">
    <div class="hidden-xs sp-loading-indicator" ng-if="loadingIndicator">
      <div></div>
      <div></div>
      <div></div>
    </div>
  </div>
</div>

<div ng-if="!c.isLoading">
  <div id="show-selected-item" ng-repeat='widget in data.widgets'>
    <sp-widget ng-if='widget.show' widget="widget.widget1"></sp-widget>
    <sp-widget ng-if='widget.show' widget="widget.widget2"></sp-widget>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
