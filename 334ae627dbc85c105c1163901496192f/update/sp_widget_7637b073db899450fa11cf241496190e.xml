<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope, $rootScope, $timeout, snAttachmentHandler, $http, i18n, categorySubscribe, $element, spUtil) {

	var c = this;
	c.isLoading = true;
	c.index = 0;

	$scope.loadingIndicator = $rootScope.loadingIndicator;
	//Show widget after loaded
	$scope.$on('sp_loading_indicator', function(e, value) {
		if($scope.loadingIndicator && !value){
			c.isLoading = false;
		}
		$scope.loadingIndicator = value;
	});

	//Upload user image
	$scope.userID = $scope.user.sys_id;
	$rootScope.$on('sp.avatar_changed', function() {
		$scope.userID = "";
		$timeout(function(){
			$scope.userID = $scope.user.sys_id;
		});
	});

	var fieldExcludes = {
		sys_user: ['name', 'introduction', 'title', 'department', 'location', 'photo',
							 'manager', 'company'],
		live_profile: ['short_description', 'photo']
	}

	$scope.uploadNewProfilePicture = function($event) {
		$event.stopPropagation();
		if($event.keyCode === 9) {
			return;
		}
		var $el = $element.find('input[type=file]');
		$el.click();
	}

	$scope.attachFiles = function(files) {
		var file = files.files[0];

		var validImage = false;

		switch(file.type) {
			case 'image/jpeg':
			case 'image/png':
			case 'image/bmp':
			case 'image/x-windows-bmp':
			case 'image/gif':
			case 'image/x-icon':
			case 'image/svg+xml':
				validImage = true;
				break;
			default:
				break;
		}

		if(!validImage) {
			alert(file.name + " " + i18n.getMessage("isn't a recognized image file format"));
			return;
		}

		snAttachmentHandler.create("live_profile", $scope.data.liveProfileID).uploadAttachment(file, {
			sysparm_fieldname: "photo"
		}).then(function(response) {
			var obj = {};
			obj.newAvatarId = response.sys_id;
			$scope.avatarPicture = {
				'background-image': "url('" + response.sys_id + ".iix')",
				'color': 'transparent'
			};
			$rootScope.$broadcast("sp.avatar_changed", obj);
		});
	}

	$scope.avatarPicture = "";

	$http.get('/api/now/live/profiles/sys_user.' + $scope.data.sysUserID).then(function (response) {
		if (response.data.result && response.data.result.avatar){
			var avatarPicture = response.data.result.avatar.replace("?t=small", "");
			$scope.avatarPicture = {
				'background-image': "url('" + avatarPicture + "')",
				'color': 'transparent'
			};
		}
	});

	spUtil.recordWatch($scope, "sys_user", "sys_id=" + $scope.data.sysUserID);
	spUtil.recordWatch($scope, "live_profile", "sys_id=" + $scope.data.liveProfileID);
	//End of user upload image

	c.data.newNotificationAvailable = false;

	spUtil.recordWatch($scope, "sc_task", c.data.taskQuery, function(event) {
		c.refreshNotificationsCount(event.data);
	});

	spUtil.recordWatch($scope, "incident", c.data.incidentQuery, function(event) {
		c.refreshNotificationsCount(event.data);
	});

	spUtil.recordWatch($scope, "sysapproval_approver", c.data.approverQuery, function(event) {
		c.refreshApprovalsCount();
	});

	c.refreshNotificationsCount = function(item){
		c.server.get({
			action: "notificationsCount",
			taskQuery: c.data.taskQuery,
			incidentQuery : c.data.incidentQuery
		}).then(function(response) {
			c.data.notificationsCount = response.data.notificationsCount;
			c.refreshNotifications(item);
		});
	}

	c.refreshNotifications = function(item){
		if(c.index == 1){
			if(item.record.state.value == "3" || item.record.state.value == "-5"){
				for(i in item.changes){
					if(item.changes[i] == "state"){
						c.data.newNotificationAvailable = true;
					}
				}
			}
		}
	}

	c.refreshApprovalsCount = function(){
		c.server.get({
			action: "approvalsCount",
			approverQuery : c.data.approverQuery
		}).then(function(response) {
			c.data.approvalsCount = response.data.approvalsCount;
		});
	}

	c.selectTab = function(tab, index){
		c.index = index;
		c.isLoading = true;
		//Var used to show notification modal
		c.data.newNotificationAvailable = false;

		for(var i in c.data.tabs){
			if(c.data.tabs[i].name == tab.name){
				c.data.tabs[i].selected = true;
			}
			else{
				c.data.tabs[i].selected = false;
			}
		}
		c.server.get({
			action: "selectedTab",
			widgets: c.data.widgets,
			index: index
		}).then(function(response) {
			c.data.widgets = response.data.widgets;
		});
	}

	$scope.$on('selectTabRequest', function(event, item_id) {
		c.index = 0;
		c.isLoading = true;
		c.data.newNotificationAvailable = false;

		for(var i in c.data.tabs){
			if(i == 0){
				c.data.tabs[i].selected = true;
			}
			else{
				c.data.tabs[i].selected = false;
			}
		}
		c.server.get({
			action: "selectedTab",
			widgets: c.data.widgets,
			index: c.index
		}).then(function(response) {
			c.data.widgets = response.data.widgets;
			$timeout(function(){
				$scope.$broadcast("selectRequest", item_id);
			}, 100);
		});
	});

}]]></client_script>
        <controller_as>c</controller_as>
        <css>.content {&#13;
  background-color: white;&#13;
  padding: 0 90px;&#13;
  padding-top: 30px;&#13;
  padding-bottom: 30px;&#13;
  margin-bottom: 50px;&#13;
&#13;
  .header-loader{&#13;
    padding: 50px;&#13;
    padding-bottom: 100px;&#13;
    .sp-loading-indicator{&#13;
      color: $deep-sky-blue !important;&#13;
    }&#13;
  }&#13;
&#13;
  .content_avatar {&#13;
    display: flex;&#13;
&#13;
    a {&#13;
      .avatar-custom-size {&#13;
        margin-top: 15px;&#13;
        margin-bottom: 30px;&#13;
        height: 90px;&#13;
        width: 90px;&#13;
        box-shadow: 0 0 0 4px $deep-sky-blue;&#13;
        font-size: 20px !important;&#13;
&#13;
        &amp;:hover {&#13;
          .tooltip {&#13;
            visibility: visible;&#13;
            opacity: 1;&#13;
          }&#13;
        }&#13;
      }&#13;
      .avatar-container .avatar.soloAvatar .sub-avatar {&#13;
        border-radius: 0;&#13;
        font-size: 50px;&#13;
        line-height: 95px;&#13;
        font-family: $text-bold;&#13;
        background-color: white;&#13;
        color: $deep-sky-blue;&#13;
      }&#13;
    }&#13;
&#13;
    .user-info-properties {&#13;
      margin-left: 100px;&#13;
      color: $slate-gray;&#13;
&#13;
      .name-properties {&#13;
        font-size: 30px;&#13;
        font-family: $text-bold;&#13;
        color: $deep-sky-blue;&#13;
        letter-spacing: -1px;&#13;
      }&#13;
      .job-properties {&#13;
        color: $dodger-blue;&#13;
        font-size: 14px;&#13;
      }&#13;
      .location-properties {&#13;
        text-transform: uppercase;&#13;
      }&#13;
    }&#13;
  }&#13;
&#13;
  .tabs-align {&#13;
    display: flex;&#13;
    justify-content: center;&#13;
&#13;
    .categories {&#13;
      display: inline-block;&#13;
      width: 20%;&#13;
      position: relative;&#13;
&#13;
      .tab_items {&#13;
        transition: .4s ease-in-out;&#13;
        margin: 0 auto;&#13;
&#13;
        .tab_images {&#13;
          transition: .4s ease-in-out;&#13;
          height: 80px;&#13;
          display: flex;&#13;
          justify-content: center;&#13;
&#13;
          .icon-img {&#13;
            transition: .4s ease-in-out;&#13;
            width: 80px;&#13;
            height: 80px;&#13;
            position: absolute;&#13;
            text-align: center;&#13;
          }&#13;
        }&#13;
        .tab_title {&#13;
          transition: .4s ease-in-out;&#13;
          font-size: 14px;&#13;
          font-family: $text-bolder;&#13;
          text-align: center;&#13;
          text-transform: uppercase;&#13;
          line-height: 1;&#13;
          width: 150px;&#13;
          margin: inherit;&#13;
          margin-top: 10px;&#13;
        }&#13;
        &amp;:hover {&#13;
&#13;
          .icon-img {&#13;
            transition: .2s ease-in-out;&#13;
            transform: scale(1.1);&#13;
            -webkit-transform: scale(1.1);&#13;
            -ms-transform: scale(1.1);&#13;
            -moz-transform: scale(1.1);&#13;
            -o-transform: scale(1.1);&#13;
          }&#13;
          .tab_title {&#13;
            transition: .2s ease-in-out;&#13;
            transform: translateY(-10px);&#13;
            -webkit-transform: translateY(-10px);&#13;
            -ms-transform: translateY(-10px);&#13;
            -moz-transform: translateY(-10px);&#13;
            -o-transform: translateY(-10px);&#13;
            color: $deep-sky-blue;&#13;
          }&#13;
        }&#13;
      }&#13;
      .tab_current {&#13;
        color: $deep-sky-blue;&#13;
      }&#13;
&#13;
    }&#13;
    .categories:nth-child(1) {&#13;
      .tab_items {&#13;
        .tab_title { width: 90px; }&#13;
      }&#13;
    }&#13;
    .categories:nth-child(4) {&#13;
      .tab_items {&#13;
        .tab_title { width: 155px; }&#13;
      }&#13;
    }&#13;
&#13;
  }&#13;
&#13;
}&#13;
&#13;
.text-align {&#13;
  text-align: center;&#13;
  padding-bottom: 30px;&#13;
}&#13;
&#13;
.margin-align {&#13;
  margin: 0 auto;&#13;
  text-align: center;&#13;
}&#13;
&#13;
.count-align {&#13;
  text-align: center;&#13;
  background: $coral;&#13;
  height: 20px;&#13;
  width: 20px;&#13;
  border-radius: 50%;&#13;
  color: white;&#13;
  font-family: $text-bolder;&#13;
  position: absolute;&#13;
  bottom: 95px;&#13;
  right: 20px;&#13;
}&#13;
&#13;
.notification-align {&#13;
  font-size: 12px;&#13;
  font-family: $text-bold;&#13;
  line-height: 1;&#13;
  .tooltip {&#13;
    visibility: visible;&#13;
    opacity: 1;&#13;
  }&#13;
  .tooltip_top {&#13;
    top: -41px;&#13;
    left: -17px;&#13;
  }&#13;
}&#13;
&#13;
.line {&#13;
  width: 100%;&#13;
  height: 2px;&#13;
  background-color: $deep-sky-blue;&#13;
  margin-top: 30px;&#13;
}&#13;
&#13;
.tooltip_top {&#13;
  top: -46px;&#13;
  left: -37px;&#13;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>gservice_my_dashboard_tabs_v2</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>GService My  Dashboard Tabs v2</name>
        <option_schema>[{"displayValue":"Category","hint":"Selecione a categoria que deseja exibir","name":"selected_category","display_value_list":[],"section":"Data","label":"Category","type":"glide_list","value":"sc_category","ed":{"reference":"sc_category"}}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	var localInput = input;
	var portalUtils = new global.OCLPortalUtils();

	if(!localInput){

		data.widgets = [];
		var requestWidget = {show : true,
												 widget : $sp.getWidget('gservice_my_dashboard_requests')};
		var notificationWidget = {show : false,
															widget : $sp.getWidget('gservice_my_dashboard_notification')};
		var approvalsWidget = {show : false,
													 widget : $sp.getWidget('gservice_my_dashboard_approvals')};
		var assetsWidget = {show : false,
												widget : $sp.getWidget('gservice_my_dashboard_assets')};
		var mostReqWidget = {show : false,
												 widget : $sp.getWidget('gservice_my_dashboard_most_req')};
		data.widgets.push(requestWidget);
		data.widgets.push(notificationWidget);
		data.widgets.push(approvalsWidget);
		data.widgets.push(assetsWidget);
		data.widgets.push(mostReqWidget);

		//Used to get the current user sys_id
		var userID = gs.getUser().getID();
		data.user_id = userID;

		//Get the current user information
		var grUserInfo = new GlideRecord ("sys_user");
		grUserInfo.get(data.user_id);
		data.name = grUserInfo.getValue("first_name");
		data.email = grUserInfo.getValue("email");
		data.phone = grUserInfo.getValue("mobile_phone");
		data.location = grUserInfo.getDisplayValue("location");

		var tabs = gs.getProperty("gservice_dashboard_tabs").split("|");
		data.tabs = [];
		for(i in tabs){
			var tab = JSON.parse(tabs[i]);
			if(tab.show == false && tab.name != "assetsTab"){
				tab.show = (gs.getUser().hasRole("approver_user") || gs.getUser().hasRole("itil"));
			}
			data.tabs.push(tab);
			data.tabs[i].label = gs.getMessage(tab.label);
		}
		data.taskQuery = "state=-5^u_pending_reason=1^request_item.opened_by="+ gs.getUserID();

		data.incidentQuery = "state=3^hold_reason=1^opened_by=" + gs.getUserID();
		data.approverQuery = "state=requested^source_table=sc_req_item^ORsource_table=change_request^approver=" + gs.getUserID();

		data.notificationsCount = portalUtils.setNotificationsCount(data.taskQuery, data.incidentQuery);
		data.approvalsCount = portalUtils.setApprovalsCount(data.approverQuery);
	}

	else{
		switch(localInput.action){
			case "selectedTab":
				data.widgets = localInput.widgets;
				for(i in data.widgets){
					data.widgets[i].show = i == localInput.index ? true : false;
				}
				if(localInput.index == 1){
					var notificationWidget = {show : true,
																		widget : $sp.getWidget('gservice_my_dashboard_notification')};
					data.widgets[1] = notificationWidget;
				}
				break;
			case "notificationsCount":
				data.notificationsCount = portalUtils.setNotificationsCount(localInput.taskQuery, localInput.incidentQuery);
				break;
			case "approvalsCount":
				data.approvalsCount = portalUtils.setApprovalsCount(localInput.approverQuery);
				break;
		}
	}

	//Upload user image
	data.sysUserID = $sp.getParameter("sys_id");
	if (!data.sysUserID)
		data.sysUserID = gs.getUser().getID();
	var sysUserGR = new GlideRecord("sys_user");
	data.userExists = sysUserGR.get(data.sysUserID) && sysUserGR.canRead();

	if (data.userExists) {
		var loggedInSysUserID = gs.getUser().getID();
		data.liveProfileID = "";

		if (GlidePluginManager().isActive('com.glideapp.live_common')) {
			var liveProfileGR = new GlideRecord("live_profile");
			liveProfileGR.addQuery("document", data.sysUserID);
			liveProfileGR.query();
			if (liveProfileGR.next()) {
				data.liveProfileID = liveProfileGR.getValue("sys_id");
				data.liveProfileModel = $sp.getForm("live_profile", data.liveProfileID)._fields;
			}
		}
	}
	//End of user image upload

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>organize.fernando</sys_created_by>
        <sys_created_on>2020-06-03 19:50:55</sys_created_on>
        <sys_id>7637b073db899450fa11cf241496190e</sys_id>
        <sys_mod_count>123</sys_mod_count>
        <sys_name>GService My  Dashboard Tabs v2</sys_name>
        <sys_package display_value="ITSM Service Portal" source="x_gmeps_itsm_servi">334ae627dbc85c105c1163901496192f</sys_package>
        <sys_policy/>
        <sys_scope display_value="ITSM Service Portal">334ae627dbc85c105c1163901496192f</sys_scope>
        <sys_update_name>sp_widget_7637b073db899450fa11cf241496190e</sys_update_name>
        <sys_updated_by>organize.jorge.garcia</sys_updated_by>
        <sys_updated_on>2020-07-30 15:49:54</sys_updated_on>
        <template><![CDATA[<div class="content" id="widget-category-items">

  <div class="content_avatar">
    <div class="">
      <input ng-show="false" type="file" ng-file-select="attachFiles({files: $files})" 
             accept="image/jpeg,image/png,image/bmp,image/x-windows-bmp,image/gif,image/x-icon,image/svg+xml"/>
      <a title="Avatar Pic" ng-click="uploadNewProfilePicture($event)"
         ng-keypress="uploadNewProfilePicture($event)" class="btn btn-default send-message avatar-custom-size">
        <sn-avatar class="avatar-custom-size" primary="userID">
          <span class="tooltip tooltip_top">
            <div class="tooltip_text">${Clique para alterar seu avatar}</div>
            <div class="tooltip_arrow arrow_bottom"></div>
          </span>
        </sn-avatar>
      </a>
    </div>
    <div class="user-info-properties">
      <div class="name-properties">{{data.name}}</div>
      <div class="job-properties">CARGO DO FUNCIONÁRIO</div>
      <div class="">{{data.email}}</div>
      <div class="">{{data.phone}}</div>
      <div class="location-properties">{{data.location}}</div>
    </div>
  </div>

  <div class="tabs-align">
    <div class="categories" ng-repeat="tab in data.tabs" ng-if="tab.show">
      <div class="tab_items" ng-class="{'tab_current': tab.selected}" ng-click="c.selectTab(tab, $index)">
        <span class="notification-align" ng-if="c.data.newNotificationAvailable && tab.name == 'notificationsTab'">
          <span class="tooltip tooltip_top">
            <div class="tooltip_text">${Você possui novas notificações, atualize a página ou reabra o menu}</div>
            <div class="tooltip_arrow arrow_bottom"></div>
          </span>
        </span>
        <div class="tab_images">
          <img ng-show="!tab.selected" src="{{tab.img}}" class="icon-img"/>
          <img ng-show="tab.selected" src="{{tab.imgSelected}}" class="icon-img"/>
        </div>
        <span class="count-align" ng-if="data.notificationsCount > 0 && tab.name == 'notificationsTab'"> {{data.notificationsCount}} </span>
        <span class="count-align" ng-if="data.approvalsCount > 0 && tab.name == 'approvalsTab'"> {{data.approvalsCount}} </span>
        <div class="tab_title">{{tab.label}}</div>
      </div>
    </div>
  </div>

  <div class="line"></div>

  <div class="header-loader" ng-show="c.isLoading">
    <div class="hidden-xs sp-loading-indicator" ng-if="loadingIndicator">
      <div></div>
      <div></div>
      <div></div>
    </div>
  </div>

  <div ng-if="!c.isLoading">
    <div id="show-selected-item" ng-repeat='widget in data.widgets'>
      <sp-widget ng-if='widget.show' widget="widget.widget"></sp-widget>
    </div>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
