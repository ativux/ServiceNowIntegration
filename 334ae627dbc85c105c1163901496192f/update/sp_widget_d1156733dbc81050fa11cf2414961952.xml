<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>standard</category>
        <client_script><![CDATA[function ($http, $filter, $location,spAriaUtil, $window, $scope, spAriaFocusManager, $rootScope, $timeout) {
	var c = this;
	c.options.glyph = c.options.glyph || 'search';
	c.options.title = c.options.title || c.data.searchMsg;
	c.options.color = c.options.color || "default";
	c.pageID = $scope.page.id;
	c.secCategory = false;
	c.showSuggestions =  c.data.searchTypeBehavior === "suggestions" && c.data.isSuggestionsEnabled === "true";

	c.onSelect = function($item, $model, $label) {
		c.data.searchTerm = $item; // prevents unexpected result if user quickly clicks search button after selecting
		c.submitSearch();
	};

	c.getSearchSuggestions = function(query) {	 
		if ($location.search().q == query)
			return;
		var payload = {
			params: {
				"sysparm_term" : query, 
				"sysparm_sp_portal_id": c.data.portalID,
				"sysparm_suggestions_limit": c.options.limit > 0 ? c.options.limit : "",
				"sysparm_search_sources": c.data.searchSourceSysIds || ""
			},
			headers : {'Accept' : 'application/json'}
		};

		var test = $http.get("/api/now/search/sp_suggestions", payload).then(function(response){ 
			var result = response.data.result;
			var resultCount = result != null ? result.entries.length : 0;
			sendLiveMessage(resultCount);

			return result.entries.map(function(item) {	
				item.query = getQueryToHighlight(item, query);
				item.glyph = getIcon(item.type);
				item.term = item.name;
				return item;	 
			});
		});
		return test;
	};

	function getSearchSources(result, c) {
		var sources = {};
		c.data.searchSources.map(function(key) {
			sources[key] = 0;
		});
		result.map(function(item) {
			if(sources[item.type])
				sources[item.type]++;
			else
				sources[item.type] = 1;
		});
		var searchSources = [];
		Object.keys(sources).map(function(key) {
			var source_id = c.data.searchSourceConfiguration[key] ? c.data.searchSourceConfiguration[key].sys_id : key;
			searchSources.push({
				source_id: source_id,
				number_of_results: sources[key]
			});
		});
		return searchSources;
	}

	c.TextSearchAnalyticsUpdateRank = function(rank) {
		var query = c.latestQuery;
		var result = _.get(c.data, 'results', []);
		var payloadObject = {
			action: "GlideSPSearchAnalyticsUpdateRank",
			payload: {
				query: query,
				portal_id: this.data.portalID,
				page_id: this.pageID,
				results_per_source: getSearchSources(result, this),
				refinement_occurred: false,
				click_rank: rank
			}
		};

		$window.spSearchAnalytics = {
			query: query,
			refinement_occurred: false
		};

		this.server.get(payloadObject);
	}

	// Attach event handler to update click rank
	// Run only once
	var attachClickRankHandler = function() {
		$(".typeahead-popup").on('click', 'li', function(e) {
			var index = $(this).data('index');
			c.TextSearchAnalyticsUpdateRank(index+1);
		});
		// Remove function definition
		// As soon as it was called
		attachClickRankHandler = function() {};
	}

	c.submitSearch = function(){
		if(c.data.broadcast_name == "getSearchedItemsFilter" || c.data.broadcast_name == "getSearchedItemsReport"){
			c.data.showClear = true;
			$rootScope.$broadcast(c.data.broadcast_name, c.data.searchTerm);
		}
		else if (c.data.broadcast_name == "getSearchKB"){
			$rootScope.$broadcast("clearAllBeforeSearch");
			$timeout(function() {
				c.getResults().then(function(response){
					if(c.data.searchTerm){
						c.data.showClear = true;
						$rootScope.$broadcast(c.data.broadcast_name, c.data.result, c.data.searchSourceID, c.data.category_id);
					}
				});
			}, 100);
		} else{
			c.getResults().then(function(response){
				if(c.data.searchTerm){
					c.data.showClear = true;
					$rootScope.$broadcast(c.data.broadcast_name, c.data.result, c.data.searchSourceID, c.data.category_id);
				}
			});
		}
	};

	c.getResults = function() {
		var query;
		if(c.data.category_id){
			query = {searchTerm : c.data.searchTerm , category_id : c.data.category_id};
		}
		else if(c.data.kb_category_id){
			query = {searchTerm : c.data.searchTerm , kb_category_id : c.data.kb_category_id, secCategories : c.secCategory};
		}
		else{
			query = c.data.searchTerm;
		}
		var payload = {
			"query": query,
			"portal": c.data.portalID,
			"page": c.pageID,
			"source": c.data.searchSources,
			"include_facets": false,
			"searchType": "typeahead"
		};

		attachClickRankHandler();

		if (c.options.limit || c.options.limit == 0)
			payload.count = c.options.limit;

		return $http.post("/api/now/sp/search", payload).then(function(response) {
			// Prevents typeahead from displaying suggestions if queries from page and input are the same
			if ($location.search().q == query)
				return;

			var result = response.data.result;
			c.data.result = result;
			var resultCount = result != null ? result.results.length : 0
			sendLiveMessage(resultCount);

			c.latestQuery = query;

			return result.results.map(function(item) {
				var config = c.data.searchSourceConfiguration[item.__search_source_id__];

				if (!item.url && config.linkToPage) {
					item.url = "?id=" + config.linkToPage;
					if (item.sys_id)
						item.url += "&sys_id=" + item.sys_id;
					if (item.table)
						item.url += "&table=" + item.table
				}

				if (config.type == "ADVANCED") {
					item.templateID = config.template;
				} else {
					item.glyph = config.glyph;
				}
				return item;
			});
		});
	}

	$scope.$on("clearAllFilters", function (event) {
		c.data.searchTerm = "";
		c.data.showClear = false;
		$rootScope.$broadcast(broadcastClear);
	});

	c.clearResults = function(){
		c.data.searchTerm = "";
		c.data.showClear = false;
		var broadcastClear = c.data.broadcast_name + "Clear";
		$rootScope.$broadcast(broadcastClear);
	}

	c.searchType = c.data.searchType;
	$scope.$on('$locationChangeSuccess', onLocationChangeSuccess);

	function onLocationChangeSuccess(event, newUrl, oldUrl) {
		if(searchSourceChanged(newUrl, oldUrl)) {
			var newUrlParams = newUrl.match(/t=.+/);
			if(!newUrlParams) {
				c.searchType = null;
			} else {
				c.searchType = newUrlParams[0].split("&")[0].substring(2);
			}
		}
	}

	function searchSourceChanged(newUrl, oldUrl) {
		var newUrlParams = newUrl.match(/t=.+/),
				oldUrlParams = oldUrl.match(/t=.+/);

		if(!newUrlParams && !oldUrlParams) {
			return false;
		}

		if((!newUrlParams && oldUrlParams) || (newUrlParams && !oldUrlParams)) {
			return true;
		}

		return newUrlParams[0].split("&")[0] !== oldUrlParams[0].split("&")[0];
	}

	function sendLiveMessage(resultCount) {
		spAriaUtil.sendLiveMessage(resultCount + " " +
															 c.data.resultMsg + " " +
															 (resultCount > 0 ? ' ' + c.data.navigationMsg : ''));
	}

	function getIcon(itemType) {
		return itemType === "INSTANCE_HISTORY" ? 'search' : 'clock-o';
	}

	function getQueryToHighlight(item, query) {
		return item.type === "INSTANCE_HISTORY" ? item.name.substring(query.length) : query;
	}

	$scope.$on("getSecCategory", function (event, data) {
		c.secCategory = data;
	});
}]]></client_script>
        <controller_as>c</controller_as>
        <css>ul.dropdown-menu {&#13;
  min-width: 100%;&#13;
  border-radius: 0px 0px 4px 4px;&#13;
  margin:0px;&#13;
}&#13;
&#13;
ul.dropdown-menu a.ta-item {&#13;
  line-height: 20px;&#13;
}&#13;
&#13;
ul.dropdown-menu i.ta-icon, i.ta-img {&#13;
  width: 20px;&#13;
  height: 20px;&#13;
  background-size: contain;&#13;
  display: inline-block;&#13;
  background-repeat: no-repeat;&#13;
  background-position: center center;&#13;
  text-align: center;&#13;
  line-height: 20px;&#13;
  vertical-align: bottom;&#13;
  margin-right: 8px;&#13;
}&#13;
&#13;
.icon-img {&#13;
  height: 60px;&#13;
  border: 0;&#13;
}&#13;
&#13;
.icon-img-dashboard {&#13;
  height: 20px;&#13;
  border: 0;&#13;
}&#13;
&#13;
::placeholder {&#13;
  font-size: 13px;&#13;
}&#13;
&#13;
.text-left {&#13;
  font-family: $text-rough;&#13;
  color: #708090;&#13;
  margin-top: 10px;&#13;
}&#13;
&#13;
.input-group-btn {&#13;
  z-index: 3;&#13;
}&#13;
&#13;
.dashboard-button {&#13;
  .btn{&#13;
    padding: 6px 12px !important;&#13;
    margin-bottom: -12px !important;&#13;
  }&#13;
}&#13;
&#13;
.input-group .form-control {&#13;
  width: 100%;&#13;
}&#13;
&#13;
.input-group {&#13;
  border-bottom: 2px solid $dodger-blue;&#13;
}&#13;
&#13;
.input-group-dashboard {&#13;
  border-bottom: 2px solid $deep-sky-blue;&#13;
}&#13;
.margins{&#13;
  margin: 32px 30px 40px 50px;&#13;
}&#13;
&#13;
input[name='q'] {&#13;
  border: 0;&#13;
  margin-top: 10%;&#13;
}&#13;
&#13;
.content_typeahead_home {&#13;
  input[name='q'] {&#13;
    margin-top: 0;&#13;
    position: absolute;&#13;
    bottom: 4px;&#13;
  }&#13;
}&#13;
&#13;
input[name='q']:focus {&#13;
  outline: none;&#13;
  box-shadow: none;&#13;
}&#13;
&#13;
input[type="reset"]{&#13;
  border: 0;&#13;
  position: absolute;&#13;
  right: 15px;&#13;
  top: 30px;&#13;
  font-size: 28px;&#13;
  z-index: 4;&#13;
  background: none;&#13;
}&#13;
&#13;
.default_properties{&#13;
  input[type='text'] {&#13;
    width: 90% !important;&#13;
  }&#13;
  .close_result-default {&#13;
    display: block;&#13;
    float: right;&#13;
    z-index: 3;&#13;
    font-size: 24px;&#13;
    margin-top: 10%;&#13;
    margin-right: 2%;&#13;
  }&#13;
}&#13;
&#13;
.close_result {&#13;
  position: absolute;&#13;
  z-index: 3;&#13;
  right: 10px !important;&#13;
  font-size: 24px;&#13;
}&#13;
&#13;
/* Template Main Search - Home */&#13;
.content_typeahead_home {&#13;
  .close_result {&#13;
    bottom: 4px;&#13;
  }&#13;
}&#13;
&#13;
/* Template Dashboard */&#13;
.content_typeahead_dashboard {&#13;
  .close_result {&#13;
    top: 17px !important;&#13;
    right: 60px !important;&#13;
  }&#13;
}&#13;
&#13;
/* TOOLTIPS */&#13;
.close_result:hover {&#13;
  .tooltip, .tooltip_ {&#13;
    visibility: visible;&#13;
    opacity: 1;&#13;
  }&#13;
}&#13;
.tooltip_top {&#13;
  top: -100%;&#13;
  left: -36px;&#13;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>gservice_typeahead_search</id>
        <internal>false</internal>
        <link><![CDATA[function(scope) {
	var lazyLoader = $injector.get("lazyLoader");
	lazyLoader.putTemplates(scope.data.typeaheadTemplates);
}]]></link>
        <name>GService Typeahead Search</name>
        <option_schema>[{"name":"title","section":"Presentation","label":"Title","type":"string"},{"name":"color","section":"Presentation","label":"Color","type":"string"},{"name":"glyph","section":"Presentation","label":"glyph","type":"string"},{"name":"size","section":"Presentation","label":"Size","type":"string"},{"hint":"Number of typeahead search results returned (default 15)","name":"limit","section":"Behavior","label":"Limit","type":"integer"},{"displayValue":"Search Source","hint":"If provided, limit the scope of the typeahead search to the given search sources","name":"contextual_search_sources","display_value_list":[],"section":"Behavior","label":"Contextual Search Sources","type":"glide_list","value":"sp_search_source","ed":{"reference":"sp_search_source"}},{"name":"broadcast_name","section":"Behavior","label":"Broadcast Name","type":"string"},{"name":"category_color","section":"Behavior","label":"Category Color","type":"string"},{"name":"category_bg_color","section":"Behavior","label":"Category Bg Color","type":"string"},{"name":"category_bd_color","section":"Behavior","label":"Category Bd Color","type":"string"},{"name":"category_search_img","section":"Behavior","label":"category Search Img","type":"string"},{"hint":"Optional to show category filters","name":"filter_search_source","section":"Data","label":"Filter Search Source","type":"string"},{"name":"category_id","section":"Data","label":"Category ID","type":"string"},{"name":"kb_category_id","section":"Data","label":"KB Category ID","type":"string"}]</option_schema>
        <public>true</public>
        <roles/>
        <script><![CDATA[(function() {
	/*if (input && input.action === "GlideSPSearchAnalyticsUpdateRank") {
		input.action = "";
		var textSearchAnalytics = new GlideSPSearchAnalytics().publish(JSON.stringify(input.payload));
		return ;
	}*/
	var localInput = input;
	data.searchSourceID = options.contextual_search_sources;
	data.broadcast_name = options.broadcast_name;
	data.searchTerm = "";
	data.showClear = false;
	data.category_id = false;
	if(options.category_id)
		data.category_id = options.category_id;

	else if(options.kb_category_id)
		data.kb_category_id = options.kb_category_id;

	switch(data.broadcast_name){
		case "getSearchedItems":
		case "getSearchedItemsCategory":
			data.htmlTemplate = "gservice_typeahead_default";
			break;
		case "getSearchKB":
			data.htmlTemplate = "gservice_typeahead_default";
			break;
		case "getSearchedItemsFilter":
			data.htmlTemplate = "gservice_typeahead_dashboard";
			data.dynamicPlaceholder = gs.getMessage("Busca detalhada por serviço");
			break;
		case "getSearchedItemsReport":
			data.htmlTemplate = "gservice_typeahead_dashboard";
			data.dynamicPlaceholder = gs.getMessage("Busca detalhada por relatório");
			break;
	}
	data.categoryColor = options.category_color;
	data.categoryBgColor = options.category_bg_color;
	data.categoryBdColor = options.category_bd_color;
	data.categorySearchImg = options.category_search_img;

	if (options.title) {
		options.title = gs.getMessage(options.title);
	}

	if (options.refresh_page_on_search_submission == undefined)
		data.refreshPageOnSearch = true;
	else
		data.refreshPageOnSearch = options.refresh_page_on_search_submission;

	data.resultMsg = gs.getMessage("Search results.");
	data.navigationMsg = gs.getMessage("To navigate, use up and down arrow keys.");
	data.portalID = $sp.getPortalRecord().getUniqueValue();
	data.searchMsg = gs.getMessage("Se preferir, faça uma busca");
	data.q = $sp.getParameter('q');

	data.isSuggestionsEnabled = gs.getProperty('glide.search.suggestions.enabled');
	data.searchTypeBehavior = gs.getProperty('glide.service_portal.search_as_you_type_behavior').toLowerCase();

	var searchSources;
	data.searchType = null;
	//Edited for test, it has to be a search source at the options;
	//data.searchType = null || options.filter_search_source;
	data.searchSources = [];
	if ($sp.getParameter("id") == "search" && $sp.getParameter("t")) {
		data.searchType = $sp.getParameter("t");
		//Edited for test, it has to be a search source at the options;
		//data.searchType = $sp.getParameter("t") || options.filter_search_source;
		searchSources = $sp.getSearchSources(data.portalID);
	} else {
		var contextualSearchSourceIDs = options.contextual_search_sources || null;

		searchSources = $sp.getSearchSources(data.portalID, contextualSearchSourceIDs);
		if (searchSources.length == 1) {
			data.searchType = searchSources[0].id;
		}
	}

	data.searchSourceSysIds = [];
	data.typeaheadTemplates = {};
	data.searchSourceConfiguration = {};
	searchSources.forEach(function(source) {
		data.searchSourceSysIds.push(source.sys_id);
		if (source.isTypeaheadEnabled) {
			data.searchSources.push(source.id);
		}
		var sourceTemplateConfiguration = {
			sys_id: source.sys_id,
			glyph: source.typeaheadGlyph,
			linkToPage: source.typeaheadPage
		};

		if (source.isAdvancedTypeaheadConfig) {
			sourceTemplateConfiguration.type = "ADVANCED";
			sourceTemplateConfiguration.template = "sp-typeahead-" + source.id + ".html";
			data.typeaheadTemplates["sp-typeahead-" + source.id + ".html"] = $sp.translateTemplate(source.typeaheadTemplate);
		} else {
			sourceTemplateConfiguration.type = "SIMPLE";
			if (!sourceTemplateConfiguration.linkToPage)
				console.log("Warning: No typeahead page or URL provided for search source " + source.name);
		}

		data.searchSourceConfiguration[source.id] = sourceTemplateConfiguration;
	});

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>organize.fernando</sys_created_by>
        <sys_created_on>2020-04-15 15:27:43</sys_created_on>
        <sys_id>d1156733dbc81050fa11cf2414961952</sys_id>
        <sys_mod_count>310</sys_mod_count>
        <sys_name>GService Typeahead Search</sys_name>
        <sys_package display_value="ITSM Service Portal" source="x_gmeps_itsm_servi">334ae627dbc85c105c1163901496192f</sys_package>
        <sys_policy/>
        <sys_scope display_value="ITSM Service Portal">334ae627dbc85c105c1163901496192f</sys_scope>
        <sys_update_name>sp_widget_d1156733dbc81050fa11cf2414961952</sys_update_name>
        <sys_updated_by>organize.jorge.garcia</sys_updated_by>
        <sys_updated_on>2020-07-30 15:10:36</sys_updated_on>
        <template><![CDATA[<div ng-include="data.htmlTemplate"></div>]]></template>
    </sp_widget>
</record_update>
