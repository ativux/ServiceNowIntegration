<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>standard</category>
        <client_script><![CDATA[function ($http, $filter, $location,spAriaUtil, $window, $scope, spAriaFocusManager, $rootScope) {
	var c = this;
	c.options.glyph = c.options.glyph || 'search';
	c.options.title = c.options.title || c.data.searchMsg;
	c.options.color = c.options.color || "default";
	c.searchTerm = c.data.q;
	c.showClear = false;
	c.pageID = $scope.page.id;
	c.showSuggestions =  c.data.searchTypeBehavior === "suggestions" && c.data.isSuggestionsEnabled === "true";

	c.onSelect = function($item, $model, $label) {
		c.searchTerm = $item; // prevents unexpected result if user quickly clicks search button after selecting
		c.submitSearch();
	};

	c.getSearchSuggestions = function(query) {	 
		if ($location.search().q == query)
			return;
		var payload = {
			params: {
				"sysparm_term" : query, 
				"sysparm_sp_portal_id": c.data.portalID,
				"sysparm_suggestions_limit": c.options.limit > 0 ? c.options.limit : "",
				"sysparm_search_sources": c.data.searchSourceSysIds || ""
			},
			headers : {'Accept' : 'application/json'}
		};

		var test = $http.get("/api/now/search/sp_suggestions", payload).then(function(response){ 
			var result = response.data.result;
			var resultCount = result != null ? result.entries.length : 0;
			sendLiveMessage(resultCount);

			return result.entries.map(function(item) {	
				item.query = getQueryToHighlight(item, query);
				item.glyph = getIcon(item.type);
				item.term = item.name;
				return item;	 
			});
		});
		return test;
	};

	function getSearchSources(result, c) {
		var sources = {};
		c.data.searchSources.map(function(key) {
			sources[key] = 0;
		});
		result.map(function(item) {
			if(sources[item.type])
				sources[item.type]++;
			else
				sources[item.type] = 1;
		});
		var searchSources = [];
		Object.keys(sources).map(function(key) {
			var source_id = c.data.searchSourceConfiguration[key] ? c.data.searchSourceConfiguration[key].sys_id : key;
			searchSources.push({
				source_id: source_id,
				number_of_results: sources[key]
			});
		});
		return searchSources;
	}

	c.TextSearchAnalyticsUpdateRank = function(rank) {
		var query = c.latestQuery;
		var result = _.get(c.data, 'results', []);
		var payloadObject = {
			action: "GlideSPSearchAnalyticsUpdateRank",
			payload: {
				query: query,
				portal_id: this.data.portalID,
				page_id: this.pageID,
				results_per_source: getSearchSources(result, this),
				refinement_occurred: false,
				click_rank: rank
			}
		};

		$window.spSearchAnalytics = {
			query: query,
			refinement_occurred: false
		};

		this.server.get(payloadObject);
	}

	// Attach event handler to update click rank
	// Run only once
	var attachClickRankHandler = function() {
		$(".typeahead-popup").on('click', 'li', function(e) {
			var index = $(this).data('index');
			c.TextSearchAnalyticsUpdateRank(index+1);
		});
		// Remove function definition
		// As soon as it was called
		attachClickRankHandler = function() {};
	}

	c.submitSearch = function(){
		c.getResults().then(function(response){
			if(c.searchTerm){
				c.showClear = true;
				$rootScope.$broadcast(c.data.broadcast_name, c.data.results, c.data.searchSourceID);
			}
		});


	};

	c.getResults = function() {
		var query = c.searchTerm;
		var payload = {
			"query": query,
			"portal": c.data.portalID,
			"page": c.pageID,
			"source": c.data.searchSources,
			"include_facets": false,
			"searchType": "typeahead"
		};

		attachClickRankHandler();

		if (c.options.limit || c.options.limit == 0)
			payload.count = c.options.limit;

		return $http.post("/api/now/sp/search", payload).then(function(response) {
			// Prevents typeahead from displaying suggestions if queries from page and input are the same
			if ($location.search().q == query)
				return;

			var result = response.data.result;
			var resultCount = result != null ? result.results.length : 0
			sendLiveMessage(resultCount);

			c.data.results = result.results;
			c.latestQuery = query;

			return result.results.map(function(item) {
				var config = c.data.searchSourceConfiguration[item.__search_source_id__];

				if (!item.url && config.linkToPage) {
					item.url = "?id=" + config.linkToPage;
					if (item.sys_id)
						item.url += "&sys_id=" + item.sys_id;
					if (item.table)
						item.url += "&table=" + item.table
				}

				if (config.type == "ADVANCED") {
					item.templateID = config.template;
				} else {
					item.glyph = config.glyph;
				}
				return item;
			});
		});
	}

	$scope.$on("clearAllFilters", function (event) {
		c.searchTerm = "";
		c.showClear = false;
		$rootScope.$broadcast(broadcastClear);
	});

	c.clearResults = function(){
		c.searchTerm = "";
		c.showClear = false;
		var broadcastClear = c.data.broadcast_name + "Clear";
		$rootScope.$broadcast(broadcastClear);
	}

	c.searchType = c.data.searchType;
	$scope.$on('$locationChangeSuccess', onLocationChangeSuccess);

	function onLocationChangeSuccess(event, newUrl, oldUrl) {
		if(searchSourceChanged(newUrl, oldUrl)) {
			var newUrlParams = newUrl.match(/t=.+/);
			if(!newUrlParams) {
				c.searchType = null;
			} else {
				c.searchType = newUrlParams[0].split("&")[0].substring(2);
			}
		}
	}

	function searchSourceChanged(newUrl, oldUrl) {
		var newUrlParams = newUrl.match(/t=.+/),
				oldUrlParams = oldUrl.match(/t=.+/);

		if(!newUrlParams && !oldUrlParams) {
			return false;
		}

		if((!newUrlParams && oldUrlParams) || (newUrlParams && !oldUrlParams)) {
			return true;
		}

		return newUrlParams[0].split("&")[0] !== oldUrlParams[0].split("&")[0];
	}

	function sendLiveMessage(resultCount) {
		spAriaUtil.sendLiveMessage(resultCount + " " +
															 c.data.resultMsg + " " +
															 (resultCount > 0 ? ' ' + c.data.navigationMsg : ''));
	}

	function getIcon(itemType) {
		return itemType === "INSTANCE_HISTORY" ? 'search' : 'clock-o';
	}

	function getQueryToHighlight(item, query) {
		return item.type === "INSTANCE_HISTORY" ? item.name.substring(query.length) : query;
	}
}]]></client_script>
        <controller_as>c</controller_as>
        <css>ul.dropdown-menu {
  min-width: 100%;
  border-radius: 0px 0px 4px 4px;
  margin:0px;
}

ul.dropdown-menu a.ta-item {
  line-height: 20px;
}

ul.dropdown-menu i.ta-icon, i.ta-img {
  width: 20px;
  height: 20px;
  background-size: contain;
  display: inline-block;
  background-repeat: no-repeat;
  background-position: center center;
  text-align: center;
  line-height: 20px;
  vertical-align: bottom;
  margin-right: 8px;
}

.icon-img {
  height: 60px;
  border: 0;
}

.icon-img-dashboard {
  height: 20px;
  border: 0;
}

::placeholder {
  font-size: 13px;
}

.text-left {
  font-family: arial;
  color: #708090;
  margin-top: 10px;
}

.input-group-btn {
  z-index: 3;
}

.dashboard-button {
  .btn{
    padding: 6px 12px !important;
    margin-bottom: -12px !important;
  }
}

.input-group .form-control {
  width: 100%;
}

.input-group {
  border-bottom: 2px solid $dodger-blue;
}

.input-group-dashboard {
  border-bottom: 2px solid $deep-sky-blue;
}
.margins{
  margin: 32px 30px 40px 50px;
}

input[name='q'] {
  border: 0;
  margin-top: 10%;
}

.content_typeahead_home {
  input[name='q'] {
    margin-top: 0;
    position: absolute;
    bottom: 4px;
  }
}

input[name='q']:focus {
  outline: none;
  box-shadow: none;
}

input[type="reset"]{
  border: 0;
  position: absolute;
  right: 15px;
  top: 30px;
  font-size: 28px;
  z-index: 4;
  background: none;
}

.default_properties{
  input[type='text'] {
    width: 90% !important;
  }
  .close_result-default {
    display: block;
    float: right;
    z-index: 3;
    font-size: 24px;
    margin-top: 10%;
    margin-right: 2%;
  }
}

.close_result {
  position: absolute;
  z-index: 3;
  right: 10px !important;
  font-size: 24px;
}

/* Template Main Search - Home */
.content_typeahead_home {
  .close_result {
    bottom: 4px;
  }
}

/* Template Dashboard */
.content_typeahead_dashboard {
  .close_result {
    top: 17px !important;
    right: 60px !important;
  }
}

/* TOOLTIPS */
.close_result:hover {
  .tooltip {
    visibility: visible;
    opacity: 1;
  }
}
.tooltip_top {
  top: -100%;
  left: -36px;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>gservice_typeahead_search</id>
        <internal>false</internal>
        <link><![CDATA[function(scope) {
	var lazyLoader = $injector.get("lazyLoader");
	lazyLoader.putTemplates(scope.data.typeaheadTemplates);
}]]></link>
        <name>GService Typeahead Search</name>
        <option_schema>[{"name":"title","section":"Presentation","label":"Title","type":"string"},{"name":"color","section":"Presentation","label":"Color","type":"string"},{"name":"glyph","section":"Presentation","label":"glyph","type":"string"},{"name":"size","section":"Presentation","label":"Size","type":"string"},{"hint":"Number of typeahead search results returned (default 15)","name":"limit","section":"Behavior","label":"Limit","type":"integer"},{"displayValue":"Search Source","hint":"If provided, limit the scope of the typeahead search to the given search sources","name":"contextual_search_sources","display_value_list":[],"section":"Behavior","label":"Contextual Search Sources","type":"glide_list","value":"sp_search_source","ed":{"reference":"sp_search_source"}},{"name":"broadcast_name","section":"Behavior","label":"Broadcast Name","type":"string"},{"name":"category_color","section":"Behavior","label":"Category Color","type":"string"},{"name":"category_bg_color","section":"Behavior","label":"Category Bg Color","type":"string"},{"name":"category_bd_color","section":"Behavior","label":"Category Bd Color","type":"string"},{"name":"category_search_img","section":"Behavior","label":"category Search Img","type":"string"},{"hint":"Optional to show category filters","name":"filter_search_source","section":"Data","label":"Filter Search Source","type":"string"}]</option_schema>
        <public>true</public>
        <roles/>
        <script><![CDATA[(function() {
	/*if (input && input.action === "GlideSPSearchAnalyticsUpdateRank") {
		input.action = "";
		var textSearchAnalytics = new GlideSPSearchAnalytics().publish(JSON.stringify(input.payload));
		return ;
	}*/
	var localInput = input;

	data.searchSourceID = options.contextual_search_sources;
	data.broadcast_name = options.broadcast_name;

	switch(data.broadcast_name){
		case "getSearchedItems":
		case "getSearchedItemsCategory":
			data.htmlTemplate = "gservice_typeahead_default"
			break;
		case "getSearchedItemsFilter":
			data.htmlTemplate = "gservice_typeahead_dashboard"
			break;
	}
	data.categoryColor = options.category_color;
	data.categoryBgColor = options.category_bg_color;
	data.categoryBdColor = options.category_bd_color;
	data.categorySearchImg = options.category_search_img;

	if (options.title) {
		options.title = gs.getMessage(options.title);
	}

	if (options.refresh_page_on_search_submission == undefined)
		data.refreshPageOnSearch = true;
	else
		data.refreshPageOnSearch = options.refresh_page_on_search_submission;

	data.resultMsg = gs.getMessage("Search results.");
	data.navigationMsg = gs.getMessage("To navigate, use up and down arrow keys.");
	data.portalID = $sp.getPortalRecord().getUniqueValue();
	data.searchMsg = gs.getMessage("Se preferir, faça uma busca");
	data.q = $sp.getParameter('q');

	data.isSuggestionsEnabled = gs.getProperty('glide.search.suggestions.enabled');
	data.searchTypeBehavior = gs.getProperty('glide.service_portal.search_as_you_type_behavior').toLowerCase();

	var searchSources;
	data.searchType = null;
	//Edited for test, it has to be a search source at the options;
	//data.searchType = null || options.filter_search_source;
	data.searchSources = [];
	if ($sp.getParameter("id") == "search" && $sp.getParameter("t")) {
		data.searchType = $sp.getParameter("t");
		//Edited for test, it has to be a search source at the options;
		//data.searchType = $sp.getParameter("t") || options.filter_search_source;
		searchSources = $sp.getSearchSources(data.portalID);
	} else {
		var contextualSearchSourceIDs = options.contextual_search_sources || null;
		searchSources = $sp.getSearchSources(data.portalID, contextualSearchSourceIDs);
		if (searchSources.length == 1) {
			data.searchType = searchSources[0].id;
		}
	}

	data.searchSourceSysIds = [];
	data.typeaheadTemplates = {};
	data.searchSourceConfiguration = {};
	searchSources.forEach(function(source) {
		data.searchSourceSysIds.push(source.sys_id);
		if (source.isTypeaheadEnabled) {
			data.searchSources.push(source.id);
		}
		var sourceTemplateConfiguration = {
			sys_id: source.sys_id,
			glyph: source.typeaheadGlyph,
			linkToPage: source.typeaheadPage
		};

		if (source.isAdvancedTypeaheadConfig) {
			sourceTemplateConfiguration.type = "ADVANCED";
			sourceTemplateConfiguration.template = "sp-typeahead-" + source.id + ".html";
			data.typeaheadTemplates["sp-typeahead-" + source.id + ".html"] = $sp.translateTemplate(source.typeaheadTemplate);
		} else {
			sourceTemplateConfiguration.type = "SIMPLE";
			if (!sourceTemplateConfiguration.linkToPage)
				console.log("Warning: No typeahead page or URL provided for search source " + source.name);
		}

		data.searchSourceConfiguration[source.id] = sourceTemplateConfiguration;
	});

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>organize.fernando</sys_created_by>
        <sys_created_on>2020-04-15 15:27:43</sys_created_on>
        <sys_id>d1156733dbc81050fa11cf2414961952</sys_id>
        <sys_mod_count>232</sys_mod_count>
        <sys_name>GService Typeahead Search</sys_name>
        <sys_package display_value="ITSM Service Portal" source="x_gmeps_itsm_servi">334ae627dbc85c105c1163901496192f</sys_package>
        <sys_policy/>
        <sys_scope display_value="ITSM Service Portal">334ae627dbc85c105c1163901496192f</sys_scope>
        <sys_update_name>sp_widget_d1156733dbc81050fa11cf2414961952</sys_update_name>
        <sys_updated_by>organize.jorge.garcia</sys_updated_by>
        <sys_updated_on>2020-06-03 15:22:56</sys_updated_on>
        <template><![CDATA[<div ng-include="data.htmlTemplate"></div>]]></template>
    </sp_widget>
</record_update>
