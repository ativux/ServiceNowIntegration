<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_rel_widget_clone">
    <sp_rel_widget_clone action="DELETE">
        <child display_value="Henrique Test Typeahead">7fc76df0dbed90105c116390149619a2</child>
        <cloned>2020-06-19 12:12:48</cloned>
        <last_validated>2020-06-19 12:12:48</last_validated>
        <parent display_value="Typeahead Search">fa20ec02cb31020000f8d856634c9ce9</parent>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;sp_widget&gt;&lt;category&gt;standard&lt;/category&gt;&lt;client_script&gt;&lt;![CDATA[function ($http, $filter, $location,spAriaUtil, $window, $scope, spAriaFocusManager) {
	var c = this;
	c.options.glyph = c.options.glyph || 'search';
	c.options.title = c.options.title || c.data.searchMsg;
	c.options.color = c.options.color || "default";
	c.searchTerm = c.data.q;
	c.searchQuery = "";
	c.pageID = $scope.page &amp;&amp; $scope.page.id;
	c.showSuggestions =  c.data.searchTypeBehavior === "suggestions" &amp;&amp; c.data.isSuggestionsEnabled === "true";
	c.suggestionsLimit = c.options.limit &gt; 0 ? c.options.limit : "";
	
	c.trackSuggestionsRenderedEvent = function(searchQueryLength, responseTimeInMilliSeconds){
		if(isUnifiedAnalyticsLoaded())
			UnifiedAnalytics.trackEvent('SEARCH_SUGGESTIONS_RENDERED', 'INFO', 
																	{'applicationId': c.data.portalID, 
																	 'searchQueryLength': searchQueryLength, 
																	 'totalSuggestionsCount': c.totalSuggestionsCount,
																	 'userHistorySuggestionsCount' : c.userHistorySuggestionsCount,
																	 'instanceHistorySuggestionsCount' : c.instanceHistorySuggestionsCount,
																	 'responseTime': responseTimeInMilliSeconds+' ms'
																	});
	};
	
	c.trackSearchClickedEvent = function(model){
			if(isUnifiedAnalyticsLoaded()) {
				if(c.showSuggestions) {
					UnifiedAnalytics.trackEvent('SEARCH_SUGGESTION_CLICKED', 'INFO',
																			{'applicationId': c.data.portalID,
																			 'searchQueryLength' : c.searchQuery.length,
																			 'suggestionClickedLength': model.name.length,
																			 'totalSuggestionsCount': c.totalSuggestionsCount,
																			 'suggestionClickedType': model.type,
																			 'aggregatedClickIndex': getSearchItemIndex(c.searchItems, model),
																			 'userHistorySuggestionsCount' : c.userHistorySuggestionsCount,
																	     'instanceHistorySuggestionsCount' : c.instanceHistorySuggestionsCount,
																			 'suggestionsDisplayLimit': c.suggestionsLimit,
																			 'relativeClickIndex': getRelativeSearchItemIndex(c.searchItems, model)
																			})
				} 
				else {
					UnifiedAnalytics.trackEvent('SEARCH_TYPEAHEAD_CLICKED', 'INFO',
																			{'applicationId': c.data.portalID,
																			 'searchQueryLength' : c.searchQuery.length,
																			 'typeaheadClickedLength': model.name &amp;&amp; model.name.length,
																			 'resultSysId': model.sys_id,
																			 'clickIndex': model.query_location != null ? model.query_location : getSearchItemIndex(c.searchItems, model),
																			 'sourceId': model.type != null ? model.type : model.table,
																			 'typeaheadDisplayLimit': c.options.limit
																			})
			}
		}
	}

	c.trackSearchSubmittedEvent = function(termLength) {
		if(isUnifiedAnalyticsLoaded()) {
			UnifiedAnalytics.trackEvent('SEARCH_SUBMITTED', 'INFO', { 'applicationId': c.data.portalID, 'searchQueryLength': termLength });
		}
	}

	c.onSelect = function($item, $model, $label) {
		c.searchTerm = ""; // prevents unexpected result if user quickly clicks search button after selecting
		if (c.showSuggestions) 
			$item.url = "?id=search&amp;q="+encodeURIComponent($item.name);
		
		if(!$item.url || $item.url === "")
			return;

		c.trackSearchClickedEvent($model);

		if ($item.target)
			window.open($item.url, $item.target);
		else {
			var newUrl = $location.url($item.url);
			spAriaFocusManager.navigateToLink(newUrl.url());
		}
	};

	function isUnifiedAnalyticsLoaded() {
		return window.UnifiedAnalytics &amp;&amp; window.UnifiedAnalytics.trackEvent;
	}

	function recordSuggestionsCount(){
		c.instanceHistorySuggestionsCount = 0;
		c.userHistorySuggestionsCount = 0;
		
		c.searchItems.forEach(function(item){
			return item.type === 'INSTANCE_HISTORY' ? c.instanceHistorySuggestionsCount++ : c.userHistorySuggestionsCount++;
		});
	}

	function getSearchItemIndex(items, targetItem) {
		return (items || []).findIndex(function(item) {
			return item.name === targetItem.name;
		});
	}

	function getRelativeSearchItemIndex(items, targetItem) {
		var groupedItems = (items || []).filter(function(item) {
			return item.type === targetItem.type;
		});

		return getSearchItemIndex(groupedItems, targetItem);
	}

	c.getSearchSuggestions = function(query) {
		c.searchQuery = query;
		if ($location.search().q == c.searchQuery)
				 return;
		
		 var payload = {
			 params: {
				 "sysparm_term" : c.searchQuery, 
				 "sysparm_sp_portal_id": c.data.portalID,
				 "sysparm_suggestions_limit": c.suggestionsLimit,
				 "sysparm_search_sources": c.data.searchSourceSysIds || ""
			 },
			 headers : {'Accept' : 'application/json'}
		 };

		 var requestTimeStamp = new Date().getTime();
		 return $http.get("/api/now/search/sp_suggestions", payload).then(function(response){ 
			 var responseTimeStamp = new Date().getTime();
			 var responseTimeInMilliSeconds = (responseTimeStamp  - requestTimeStamp);
			 var result = response.data.result;
			 
			 c.totalSuggestionsCount = result != null ? result.entries.length : 0;
			 sendLiveMessage(c.totalSuggestionsCount);

			 c.searchItems = result.entries.map(function(item) {
				 item.query = getQueryToHighlight(item, c.searchQuery);
				 item.glyph = getIcon(item.type);
				 item.term = item.name;
				 return item;	 
			 });

			 recordSuggestionsCount();
			 c.trackSuggestionsRenderedEvent(query.length, responseTimeInMilliSeconds);
			 return c.searchItems;
		 });
  	};

	function getSearchSources(result, c) {
		var sources = {};
		c.data.searchSources.map(function(key) {
			sources[key] = 0;
		});
		result.map(function(item) {
			if(sources[item.type])
				sources[item.type]++;
			else
				sources[item.type] = 1;
		});
		var searchSources = [];
		Object.keys(sources).map(function(key) {
			var source_id = c.data.searchSourceConfiguration[key] ? c.data.searchSourceConfiguration[key].sys_id : key;
			searchSources.push({
				source_id: source_id,
				number_of_results: sources[key]
			});
		});
		return searchSources;
	}
	
	function setUserLocationCoords(cb) {
		var onSuccess = function(pos) {
			return cb({
				latitude: pos.coords.latitude,
				longitude: pos.coords.longitude
			})
		};

		var onError = function() {
			return cb({
				latitude: null,
				longitude: null	
			});
		};

		return window.navigator.geolocation.getCurrentPosition(onSuccess, onError, {
			enableHighAccuracy: true
		});
	}

	c.trackSearchResultClicked = function(rank) {
		if (!rank || rank &lt; 1) return ;
		var query = c.latestQuery;
		var results = _.get(c.data, 'results', []);
		var result = results[rank-1];
		var description = result.name != null ? result.name : result.primary;
		var sourceTable = result.table != null ? result.table : null;

		var payloadObject = {
			action: "GlideSPSearchAnalyticsUpdateRank",
			payload: {
				query: query,
				portal_id: this.data.portalID,
				page_id: this.pageID,
				results_per_source: getSearchSources(results, this),
				refinement_occurred: false,
				click_rank: rank,
				browser_info: $window.navigator.userAgent,
				location: {},
				result_clicked_sys_id : result.sys_id,
				label_description : description,
				source_table: sourceTable
			}
		};

		setUserLocationCoords(function(coords) {
			payloadObject.payload.location.latitude = coords.latitude;
			payloadObject.payload.location.longitude = coords.longitude;
			
			$window.spSearchAnalytics = {
				query: query,
				refinement_occurred: false
			};
			c.server.get(payloadObject);
		});
	}
	
	// Attach event handler to update click rank
	// Run only once
	var attachClickRankHandler = function() {
		$(".typeahead-popup").on('click', 'li', function(e) {
			var index = $(this).data('index');
			c.trackSearchResultClicked(index+1);
		});
		// Remove function definition
		// As soon as it was called
		attachClickRankHandler = function() {};
	}

	c.getResults = function(query) {
	  c.searchQuery = query;
		var payload = {
			"query": c.searchQuery,
			"portal": c.data.portalID,
			"page": c.pageID,
			"source": c.data.searchSources,
			"include_facets": false,
			"searchType": "typeahead"
		};

		attachClickRankHandler();

		if (c.options.limit || c.options.limit == 0)
			payload.count = c.options.limit;

		return $http.post("/api/now/sp/search", payload).then(function(response) {
			// Prevents typeahead from displaying suggestions if queries from page and input are the same
			if ($location.search().q == c.searchQuery)
				return;

			var result = response.data.result;
			var resultCount = result != null ? result.results.length : 0
			sendLiveMessage(resultCount);

			c.data.results = result.results;
			c.latestQuery = c.searchQuery;

			c.searchItems = result.results.map(function(item) {
				var config = c.data.searchSourceConfiguration[item.__search_source_id__];

				if (!item.url &amp;&amp; config.linkToPage) {
					item.url = "?id=" + config.linkToPage;
					if (item.sys_id)
						item.url += "&amp;sys_id=" + item.sys_id;
					if (item.table)
						item.url += "&amp;table=" + item.table
				}

				if (config.type == "ADVANCED") {
					item.templateID = config.template;
				} else {
					item.glyph = config.glyph;
				}
				return item;
			});

			return c.searchItems;
		});
	}

	c.searchType = c.data.searchType;
	$scope.$on('$locationChangeSuccess', onLocationChangeSuccess);

	function onLocationChangeSuccess(event, newUrl, oldUrl) {
		if(searchSourceChanged(newUrl, oldUrl)) {
			var newUrlParams = newUrl.match(/t=.+/);
			if(!newUrlParams) {
				c.searchType = null;
			} else {
				c.searchType = newUrlParams[0].split("&amp;")[0].substring(2);
			}
		}
	}

	function searchSourceChanged(newUrl, oldUrl) {
		var newUrlParams = newUrl.match(/t=.+/),
		oldUrlParams = oldUrl.match(/t=.+/);

		if(!newUrlParams &amp;&amp; !oldUrlParams) {
			return false;
		}

		if((!newUrlParams &amp;&amp; oldUrlParams) || (newUrlParams &amp;&amp; !oldUrlParams)) {
			return true;
		}

		return newUrlParams[0].split("&amp;")[0] !== oldUrlParams[0].split("&amp;")[0];
	}

	c.submitSearch = function() {
		var shouldReloadPage = c.data.refreshPageOnSearch &amp;&amp; $location.search().id === 'search';

		if (c.searchTerm) {
			var newUrl = $location.search({
				id: 'search',
				spa: '1',
				t: c.searchType,
				q: c.searchTerm
			});

			if (shouldReloadPage)
				$scope.$emit("sp.page.reload");
			
			c.trackSearchSubmittedEvent(c.searchTerm.length);
			spAriaFocusManager.navigateToLink(newUrl.url());
			//Pass the current page ID to search page for Search Analytics
			$window.spSearchAnalytics = {
				page_id: c.pageID,
				refinement_occurred: false
			};
		}
	}

	function sendLiveMessage(resultCount) {
		spAriaUtil.sendLiveMessage(resultCount + " " +
									c.data.resultMsg + " " +
									(resultCount &gt; 0 ? ' ' + c.data.navigationMsg : ''));
	}

	function getIcon(itemType) {
		return itemType === "INSTANCE_HISTORY" ? 'search' : 'clock-o';
	}

	function getQueryToHighlight(item, query) {
		return item.type === "INSTANCE_HISTORY" ? item.name.substring(query.length) : query;
	}
}]]&gt;&lt;/client_script&gt;&lt;controller_as&gt;c&lt;/controller_as&gt;&lt;css&gt;ul.dropdown-menu {
    min-width: 100%;
    border-radius: 0px 0px 4px 4px;
    margin:0px;
}

ul.dropdown-menu a.ta-item {
	line-height: 20px;
}

ul.dropdown-menu i.ta-icon, i.ta-img {
    width: 20px;
    height: 20px;
    background-size: contain;
    display: inline-block;
    background-repeat: no-repeat;
    background-position: center center;
    text-align: center;
    line-height: 20px;
    vertical-align: bottom;
    margin-right: 8px;
}

input[name="q"] {
color: black;
}&lt;/css&gt;&lt;data_table&gt;sp_instance&lt;/data_table&gt;&lt;demo_data/&gt;&lt;description/&gt;&lt;docs/&gt;&lt;field_list/&gt;&lt;has_preview&gt;false&lt;/has_preview&gt;&lt;id&gt;typeahead-search&lt;/id&gt;&lt;internal&gt;false&lt;/internal&gt;&lt;link&gt;&lt;![CDATA[function(scope) {
	var lazyLoader = $injector.get("lazyLoader");
	lazyLoader.putTemplates(scope.data.typeaheadTemplates);
}]]&gt;&lt;/link&gt;&lt;name&gt;Typeahead Search&lt;/name&gt;&lt;option_schema&gt;[{"name":"title","section":"Presentation","label":"Title","type":"string"},{"name":"color","section":"Presentation","label":"Color","type":"string"},{"name":"glyph","section":"Presentation","label":"glyph","type":"string"},{"name":"size","section":"Presentation","label":"Size","type":"string"},{"hint":"Number of typeahead search results returned (default 15)","name":"limit","section":"Behavior","label":"Limit","type":"integer"},{"displayValue":"Search Source","hint":"If provided, limit the scope of the typeahead search to the given search sources","name":"contextual_search_sources","display_value_list":[],"section":"Behavior","label":"Contextual Search Sources","type":"glide_list","value":"sp_search_source","ed":{"reference":"sp_search_source"}}]&lt;/option_schema&gt;&lt;public&gt;true&lt;/public&gt;&lt;roles/&gt;&lt;script&gt;&lt;![CDATA[(function() {
	if (input &amp;&amp; input.action === "GlideSPSearchAnalyticsUpdateRank") {
		input.action = "";
		var textSearchAnalytics = new GlideSPSearchAnalytics().publish(JSON.stringify(input.payload));
		return ;
	}

	if (options.title) {
		options.title = gs.getMessage(options.title);
	}

	if (options.refresh_page_on_search_submission == undefined)
		data.refreshPageOnSearch = true;
	else
		data.refreshPageOnSearch = options.refresh_page_on_search_submission;

	data.resultMsg = gs.getMessage("Search results.");
	data.navigationMsg = gs.getMessage("To navigate, use up and down arrow keys.");
	data.portalID = $sp.getPortalRecord().getUniqueValue();
	data.searchMsg = gs.getMessage("Search");
	data.q = $sp.getParameter('q');

	data.isSuggestionsEnabled = gs.getProperty('glide.search.suggestions.enabled');
	data.searchTypeBehavior = gs.getProperty('glide.service_portal.search_as_you_type_behavior').toLowerCase();

	var searchSources;
	data.searchType = null;
	data.searchSources = [];
	if ($sp.getParameter("id") == "search" &amp;&amp; $sp.getParameter("t")) {
		data.searchType = $sp.getParameter("t");
		searchSources = $sp.getSearchSources(data.portalID);
	} else {
		var contextualSearchSourceIDs = options.contextual_search_sources || null;
		searchSources = $sp.getSearchSources(data.portalID, contextualSearchSourceIDs);
		if (searchSources.length == 1) {
			data.searchType = searchSources[0].id;
		}
	}

	data.searchSourceSysIds = [];
	data.typeaheadTemplates = {};
	data.searchSourceConfiguration = {};
	searchSources.forEach(function(source) {
		data.searchSourceSysIds.push(source.sys_id);
		if (source.isTypeaheadEnabled) {
			data.searchSources.push(source.id);
		}
		var sourceTemplateConfiguration = {
			sys_id: source.sys_id,
			glyph: source.typeaheadGlyph,
			linkToPage: source.typeaheadPage
		};

		if (source.isAdvancedTypeaheadConfig) {
			sourceTemplateConfiguration.type = "ADVANCED";
			sourceTemplateConfiguration.template = "sp-typeahead-" + source.id + ".html";
			data.typeaheadTemplates["sp-typeahead-" + source.id + ".html"] = $sp.translateTemplate(source.typeaheadTemplate);
		} else {
			sourceTemplateConfiguration.type = "SIMPLE";
			if (!sourceTemplateConfiguration.linkToPage)
			console.log("Warning: No typeahead page or URL provided for search source " + source.name);
		}

		data.searchSourceConfiguration[source.id] = sourceTemplateConfiguration;
	});
})();]]&gt;&lt;/script&gt;&lt;servicenow&gt;true&lt;/servicenow&gt;&lt;sys_class_name&gt;sp_widget&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2015-08-12 00:47:31&lt;/sys_created_on&gt;&lt;sys_id&gt;fa20ec02cb31020000f8d856634c9ce9&lt;/sys_id&gt;&lt;sys_mod_count&gt;859&lt;/sys_mod_count&gt;&lt;sys_name&gt;Typeahead Search&lt;/sys_name&gt;&lt;sys_package display_value="Service Portal - Core" source="com.glide.service-portal"&gt;44efe504db350010fa11cf2414961981&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;&lt;sys_update_name&gt;sp_widget_fa20ec02cb31020000f8d856634c9ce9&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2019-10-28 05:49:08&lt;/sys_updated_on&gt;&lt;template&gt;&lt;![CDATA[&lt;form ng-submit="c.submitSearch()"&gt;
  &lt;input type="hidden" name="id" value="search"/&gt;
  &lt;input type="hidden" name="t" value="{{c.searchType}}"/&gt;
  &lt;div class="input-group input-group-{{::c.options.size}}"&gt;
    &lt;!-- uses ui.bootstrap.typeahead --&gt;
    &lt;input ng-if="c.showSuggestions"
           name="q" type="text" placeholder="{{::c.options.title}}" ng-model="c.searchTerm"
           autocomplete="off"
           uib-typeahead="item as item.term for item in c.getSearchSuggestions($viewValue)"
           typeahead-wait-ms="250"
           typeahead-min-length="1"
           typeahead-focus-first="false"
           typeahead-on-select="c.onSelect($item, $model, $label)"
           typeahead-template-url="sp-typeahead.html"
           typeahead-popup-template-url="sp-typeahead-popup.html"
           class="form-control input-typeahead"
           role="textbox"
           aria-label="{{::c.options.title}}" tabindex="0" aria-haspopup="true"&gt;
    &lt;input ng-if="!c.showSuggestions"
           name="q" type="text" placeholder="{{::c.options.title}}" ng-model="c.searchTerm"
           autocomplete="off"
           uib-typeahead="item as item.primary for item in c.getResults($viewValue)"
           typeahead-wait-ms="250"
           typeahead-min-length="2"
           typeahead-focus-first="false"
           typeahead-on-select="c.onSelect($item, $model, $label)"
           typeahead-template-url="sp-typeahead.html"
           typeahead-popup-template-url="sp-typeahead-popup.html"
           class="form-control input-typeahead"
           role="textbox"
           aria-label="{{::c.options.title}}" tabindex="0" aria-haspopup="true"&gt;
    &lt;span class="input-group-btn"&gt;
      &lt;button name="search" type="submit" class="btn btn-{{::c.options.color}}"
              title="{{::c.data.searchMsg}}" aria-label="{{::c.data.searchMsg}}"&gt;
    	&lt;i ng-if="::c.options.glyph" class="fa fa-{{::c.options.glyph}}"&gt;&lt;/i&gt;
      &lt;/button&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/form&gt;]]&gt;&lt;/template&gt;&lt;/sp_widget&gt;</payload>
        <sys_class_name>sp_rel_widget_clone</sys_class_name>
        <sys_created_by>organize.henrique</sys_created_by>
        <sys_created_on>2020-06-19 12:12:48</sys_created_on>
        <sys_id>00d76df0dbed90105c116390149619a6</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>7fc76df0dbed90105c116390149619a2</sys_name>
        <sys_package display_value="ITSM Service Portal" source="x_gmeps_itsm_servi">334ae627dbc85c105c1163901496192f</sys_package>
        <sys_policy/>
        <sys_scope display_value="ITSM Service Portal">334ae627dbc85c105c1163901496192f</sys_scope>
        <sys_update_name>sp_rel_widget_clone_00d76df0dbed90105c116390149619a6</sys_update_name>
        <sys_updated_by>organize.henrique</sys_updated_by>
        <sys_updated_on>2020-06-19 12:12:48</sys_updated_on>
    </sp_rel_widget_clone>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="ITSM Service Portal">334ae627dbc85c105c1163901496192f</application>
        <file_path/>
        <instance_id>cf5b95b4dba4bb0007072f17d496195a</instance_id>
        <instance_name>globosatdev</instance_name>
        <name>sp_rel_widget_clone_00d76df0dbed90105c116390149619a6</name>
        <payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_rel_widget_clone"><sp_rel_widget_clone action="INSERT_OR_UPDATE"><child display_value="Henrique Test Typeahead">7fc76df0dbed90105c116390149619a2</child><cloned>2020-06-19 12:12:48</cloned><last_validated>2020-06-19 12:12:48</last_validated><parent display_value="Typeahead Search">fa20ec02cb31020000f8d856634c9ce9</parent><payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;sp_widget&gt;&lt;category&gt;standard&lt;/category&gt;&lt;client_script&gt;&lt;![CDATA[function ($http, $filter, $location,spAriaUtil, $window, $scope, spAriaFocusManager) {
	var c = this;
	c.options.glyph = c.options.glyph || 'search';
	c.options.title = c.options.title || c.data.searchMsg;
	c.options.color = c.options.color || "default";
	c.searchTerm = c.data.q;
	c.searchQuery = "";
	c.pageID = $scope.page &amp;&amp; $scope.page.id;
	c.showSuggestions =  c.data.searchTypeBehavior === "suggestions" &amp;&amp; c.data.isSuggestionsEnabled === "true";
	c.suggestionsLimit = c.options.limit &gt; 0 ? c.options.limit : "";
	
	c.trackSuggestionsRenderedEvent = function(searchQueryLength, responseTimeInMilliSeconds){
		if(isUnifiedAnalyticsLoaded())
			UnifiedAnalytics.trackEvent('SEARCH_SUGGESTIONS_RENDERED', 'INFO', 
																	{'applicationId': c.data.portalID, 
																	 'searchQueryLength': searchQueryLength, 
																	 'totalSuggestionsCount': c.totalSuggestionsCount,
																	 'userHistorySuggestionsCount' : c.userHistorySuggestionsCount,
																	 'instanceHistorySuggestionsCount' : c.instanceHistorySuggestionsCount,
																	 'responseTime': responseTimeInMilliSeconds+' ms'
																	});
	};
	
	c.trackSearchClickedEvent = function(model){
			if(isUnifiedAnalyticsLoaded()) {
				if(c.showSuggestions) {
					UnifiedAnalytics.trackEvent('SEARCH_SUGGESTION_CLICKED', 'INFO',
																			{'applicationId': c.data.portalID,
																			 'searchQueryLength' : c.searchQuery.length,
																			 'suggestionClickedLength': model.name.length,
																			 'totalSuggestionsCount': c.totalSuggestionsCount,
																			 'suggestionClickedType': model.type,
																			 'aggregatedClickIndex': getSearchItemIndex(c.searchItems, model),
																			 'userHistorySuggestionsCount' : c.userHistorySuggestionsCount,
																	     'instanceHistorySuggestionsCount' : c.instanceHistorySuggestionsCount,
																			 'suggestionsDisplayLimit': c.suggestionsLimit,
																			 'relativeClickIndex': getRelativeSearchItemIndex(c.searchItems, model)
																			})
				} 
				else {
					UnifiedAnalytics.trackEvent('SEARCH_TYPEAHEAD_CLICKED', 'INFO',
																			{'applicationId': c.data.portalID,
																			 'searchQueryLength' : c.searchQuery.length,
																			 'typeaheadClickedLength': model.name &amp;&amp; model.name.length,
																			 'resultSysId': model.sys_id,
																			 'clickIndex': model.query_location != null ? model.query_location : getSearchItemIndex(c.searchItems, model),
																			 'sourceId': model.type != null ? model.type : model.table,
																			 'typeaheadDisplayLimit': c.options.limit
																			})
			}
		}
	}

	c.trackSearchSubmittedEvent = function(termLength) {
		if(isUnifiedAnalyticsLoaded()) {
			UnifiedAnalytics.trackEvent('SEARCH_SUBMITTED', 'INFO', { 'applicationId': c.data.portalID, 'searchQueryLength': termLength });
		}
	}

	c.onSelect = function($item, $model, $label) {
		c.searchTerm = ""; // prevents unexpected result if user quickly clicks search button after selecting
		if (c.showSuggestions) 
			$item.url = "?id=search&amp;q="+encodeURIComponent($item.name);
		
		if(!$item.url || $item.url === "")
			return;

		c.trackSearchClickedEvent($model);

		if ($item.target)
			window.open($item.url, $item.target);
		else {
			var newUrl = $location.url($item.url);
			spAriaFocusManager.navigateToLink(newUrl.url());
		}
	};

	function isUnifiedAnalyticsLoaded() {
		return window.UnifiedAnalytics &amp;&amp; window.UnifiedAnalytics.trackEvent;
	}

	function recordSuggestionsCount(){
		c.instanceHistorySuggestionsCount = 0;
		c.userHistorySuggestionsCount = 0;
		
		c.searchItems.forEach(function(item){
			return item.type === 'INSTANCE_HISTORY' ? c.instanceHistorySuggestionsCount++ : c.userHistorySuggestionsCount++;
		});
	}

	function getSearchItemIndex(items, targetItem) {
		return (items || []).findIndex(function(item) {
			return item.name === targetItem.name;
		});
	}

	function getRelativeSearchItemIndex(items, targetItem) {
		var groupedItems = (items || []).filter(function(item) {
			return item.type === targetItem.type;
		});

		return getSearchItemIndex(groupedItems, targetItem);
	}

	c.getSearchSuggestions = function(query) {
		c.searchQuery = query;
		if ($location.search().q == c.searchQuery)
				 return;
		
		 var payload = {
			 params: {
				 "sysparm_term" : c.searchQuery, 
				 "sysparm_sp_portal_id": c.data.portalID,
				 "sysparm_suggestions_limit": c.suggestionsLimit,
				 "sysparm_search_sources": c.data.searchSourceSysIds || ""
			 },
			 headers : {'Accept' : 'application/json'}
		 };

		 var requestTimeStamp = new Date().getTime();
		 return $http.get("/api/now/search/sp_suggestions", payload).then(function(response){ 
			 var responseTimeStamp = new Date().getTime();
			 var responseTimeInMilliSeconds = (responseTimeStamp  - requestTimeStamp);
			 var result = response.data.result;
			 
			 c.totalSuggestionsCount = result != null ? result.entries.length : 0;
			 sendLiveMessage(c.totalSuggestionsCount);

			 c.searchItems = result.entries.map(function(item) {
				 item.query = getQueryToHighlight(item, c.searchQuery);
				 item.glyph = getIcon(item.type);
				 item.term = item.name;
				 return item;	 
			 });

			 recordSuggestionsCount();
			 c.trackSuggestionsRenderedEvent(query.length, responseTimeInMilliSeconds);
			 return c.searchItems;
		 });
  	};

	function getSearchSources(result, c) {
		var sources = {};
		c.data.searchSources.map(function(key) {
			sources[key] = 0;
		});
		result.map(function(item) {
			if(sources[item.type])
				sources[item.type]++;
			else
				sources[item.type] = 1;
		});
		var searchSources = [];
		Object.keys(sources).map(function(key) {
			var source_id = c.data.searchSourceConfiguration[key] ? c.data.searchSourceConfiguration[key].sys_id : key;
			searchSources.push({
				source_id: source_id,
				number_of_results: sources[key]
			});
		});
		return searchSources;
	}
	
	function setUserLocationCoords(cb) {
		var onSuccess = function(pos) {
			return cb({
				latitude: pos.coords.latitude,
				longitude: pos.coords.longitude
			})
		};

		var onError = function() {
			return cb({
				latitude: null,
				longitude: null	
			});
		};

		return window.navigator.geolocation.getCurrentPosition(onSuccess, onError, {
			enableHighAccuracy: true
		});
	}

	c.trackSearchResultClicked = function(rank) {
		if (!rank || rank &lt; 1) return ;
		var query = c.latestQuery;
		var results = _.get(c.data, 'results', []);
		var result = results[rank-1];
		var description = result.name != null ? result.name : result.primary;
		var sourceTable = result.table != null ? result.table : null;

		var payloadObject = {
			action: "GlideSPSearchAnalyticsUpdateRank",
			payload: {
				query: query,
				portal_id: this.data.portalID,
				page_id: this.pageID,
				results_per_source: getSearchSources(results, this),
				refinement_occurred: false,
				click_rank: rank,
				browser_info: $window.navigator.userAgent,
				location: {},
				result_clicked_sys_id : result.sys_id,
				label_description : description,
				source_table: sourceTable
			}
		};

		setUserLocationCoords(function(coords) {
			payloadObject.payload.location.latitude = coords.latitude;
			payloadObject.payload.location.longitude = coords.longitude;
			
			$window.spSearchAnalytics = {
				query: query,
				refinement_occurred: false
			};
			c.server.get(payloadObject);
		});
	}
	
	// Attach event handler to update click rank
	// Run only once
	var attachClickRankHandler = function() {
		$(".typeahead-popup").on('click', 'li', function(e) {
			var index = $(this).data('index');
			c.trackSearchResultClicked(index+1);
		});
		// Remove function definition
		// As soon as it was called
		attachClickRankHandler = function() {};
	}

	c.getResults = function(query) {
	  c.searchQuery = query;
		var payload = {
			"query": c.searchQuery,
			"portal": c.data.portalID,
			"page": c.pageID,
			"source": c.data.searchSources,
			"include_facets": false,
			"searchType": "typeahead"
		};

		attachClickRankHandler();

		if (c.options.limit || c.options.limit == 0)
			payload.count = c.options.limit;

		return $http.post("/api/now/sp/search", payload).then(function(response) {
			// Prevents typeahead from displaying suggestions if queries from page and input are the same
			if ($location.search().q == c.searchQuery)
				return;

			var result = response.data.result;
			var resultCount = result != null ? result.results.length : 0
			sendLiveMessage(resultCount);

			c.data.results = result.results;
			c.latestQuery = c.searchQuery;

			c.searchItems = result.results.map(function(item) {
				var config = c.data.searchSourceConfiguration[item.__search_source_id__];

				if (!item.url &amp;&amp; config.linkToPage) {
					item.url = "?id=" + config.linkToPage;
					if (item.sys_id)
						item.url += "&amp;sys_id=" + item.sys_id;
					if (item.table)
						item.url += "&amp;table=" + item.table
				}

				if (config.type == "ADVANCED") {
					item.templateID = config.template;
				} else {
					item.glyph = config.glyph;
				}
				return item;
			});

			return c.searchItems;
		});
	}

	c.searchType = c.data.searchType;
	$scope.$on('$locationChangeSuccess', onLocationChangeSuccess);

	function onLocationChangeSuccess(event, newUrl, oldUrl) {
		if(searchSourceChanged(newUrl, oldUrl)) {
			var newUrlParams = newUrl.match(/t=.+/);
			if(!newUrlParams) {
				c.searchType = null;
			} else {
				c.searchType = newUrlParams[0].split("&amp;")[0].substring(2);
			}
		}
	}

	function searchSourceChanged(newUrl, oldUrl) {
		var newUrlParams = newUrl.match(/t=.+/),
		oldUrlParams = oldUrl.match(/t=.+/);

		if(!newUrlParams &amp;&amp; !oldUrlParams) {
			return false;
		}

		if((!newUrlParams &amp;&amp; oldUrlParams) || (newUrlParams &amp;&amp; !oldUrlParams)) {
			return true;
		}

		return newUrlParams[0].split("&amp;")[0] !== oldUrlParams[0].split("&amp;")[0];
	}

	c.submitSearch = function() {
		var shouldReloadPage = c.data.refreshPageOnSearch &amp;&amp; $location.search().id === 'search';

		if (c.searchTerm) {
			var newUrl = $location.search({
				id: 'search',
				spa: '1',
				t: c.searchType,
				q: c.searchTerm
			});

			if (shouldReloadPage)
				$scope.$emit("sp.page.reload");
			
			c.trackSearchSubmittedEvent(c.searchTerm.length);
			spAriaFocusManager.navigateToLink(newUrl.url());
			//Pass the current page ID to search page for Search Analytics
			$window.spSearchAnalytics = {
				page_id: c.pageID,
				refinement_occurred: false
			};
		}
	}

	function sendLiveMessage(resultCount) {
		spAriaUtil.sendLiveMessage(resultCount + " " +
									c.data.resultMsg + " " +
									(resultCount &gt; 0 ? ' ' + c.data.navigationMsg : ''));
	}

	function getIcon(itemType) {
		return itemType === "INSTANCE_HISTORY" ? 'search' : 'clock-o';
	}

	function getQueryToHighlight(item, query) {
		return item.type === "INSTANCE_HISTORY" ? item.name.substring(query.length) : query;
	}
}]]&gt;&lt;/client_script&gt;&lt;controller_as&gt;c&lt;/controller_as&gt;&lt;css&gt;ul.dropdown-menu {
    min-width: 100%;
    border-radius: 0px 0px 4px 4px;
    margin:0px;
}

ul.dropdown-menu a.ta-item {
	line-height: 20px;
}

ul.dropdown-menu i.ta-icon, i.ta-img {
    width: 20px;
    height: 20px;
    background-size: contain;
    display: inline-block;
    background-repeat: no-repeat;
    background-position: center center;
    text-align: center;
    line-height: 20px;
    vertical-align: bottom;
    margin-right: 8px;
}

input[name="q"] {
color: black;
}&lt;/css&gt;&lt;data_table&gt;sp_instance&lt;/data_table&gt;&lt;demo_data/&gt;&lt;description/&gt;&lt;docs/&gt;&lt;field_list/&gt;&lt;has_preview&gt;false&lt;/has_preview&gt;&lt;id&gt;typeahead-search&lt;/id&gt;&lt;internal&gt;false&lt;/internal&gt;&lt;link&gt;&lt;![CDATA[function(scope) {
	var lazyLoader = $injector.get("lazyLoader");
	lazyLoader.putTemplates(scope.data.typeaheadTemplates);
}]]&gt;&lt;/link&gt;&lt;name&gt;Typeahead Search&lt;/name&gt;&lt;option_schema&gt;[{"name":"title","section":"Presentation","label":"Title","type":"string"},{"name":"color","section":"Presentation","label":"Color","type":"string"},{"name":"glyph","section":"Presentation","label":"glyph","type":"string"},{"name":"size","section":"Presentation","label":"Size","type":"string"},{"hint":"Number of typeahead search results returned (default 15)","name":"limit","section":"Behavior","label":"Limit","type":"integer"},{"displayValue":"Search Source","hint":"If provided, limit the scope of the typeahead search to the given search sources","name":"contextual_search_sources","display_value_list":[],"section":"Behavior","label":"Contextual Search Sources","type":"glide_list","value":"sp_search_source","ed":{"reference":"sp_search_source"}}]&lt;/option_schema&gt;&lt;public&gt;true&lt;/public&gt;&lt;roles/&gt;&lt;script&gt;&lt;![CDATA[(function() {
	if (input &amp;&amp; input.action === "GlideSPSearchAnalyticsUpdateRank") {
		input.action = "";
		var textSearchAnalytics = new GlideSPSearchAnalytics().publish(JSON.stringify(input.payload));
		return ;
	}

	if (options.title) {
		options.title = gs.getMessage(options.title);
	}

	if (options.refresh_page_on_search_submission == undefined)
		data.refreshPageOnSearch = true;
	else
		data.refreshPageOnSearch = options.refresh_page_on_search_submission;

	data.resultMsg = gs.getMessage("Search results.");
	data.navigationMsg = gs.getMessage("To navigate, use up and down arrow keys.");
	data.portalID = $sp.getPortalRecord().getUniqueValue();
	data.searchMsg = gs.getMessage("Search");
	data.q = $sp.getParameter('q');

	data.isSuggestionsEnabled = gs.getProperty('glide.search.suggestions.enabled');
	data.searchTypeBehavior = gs.getProperty('glide.service_portal.search_as_you_type_behavior').toLowerCase();

	var searchSources;
	data.searchType = null;
	data.searchSources = [];
	if ($sp.getParameter("id") == "search" &amp;&amp; $sp.getParameter("t")) {
		data.searchType = $sp.getParameter("t");
		searchSources = $sp.getSearchSources(data.portalID);
	} else {
		var contextualSearchSourceIDs = options.contextual_search_sources || null;
		searchSources = $sp.getSearchSources(data.portalID, contextualSearchSourceIDs);
		if (searchSources.length == 1) {
			data.searchType = searchSources[0].id;
		}
	}

	data.searchSourceSysIds = [];
	data.typeaheadTemplates = {};
	data.searchSourceConfiguration = {};
	searchSources.forEach(function(source) {
		data.searchSourceSysIds.push(source.sys_id);
		if (source.isTypeaheadEnabled) {
			data.searchSources.push(source.id);
		}
		var sourceTemplateConfiguration = {
			sys_id: source.sys_id,
			glyph: source.typeaheadGlyph,
			linkToPage: source.typeaheadPage
		};

		if (source.isAdvancedTypeaheadConfig) {
			sourceTemplateConfiguration.type = "ADVANCED";
			sourceTemplateConfiguration.template = "sp-typeahead-" + source.id + ".html";
			data.typeaheadTemplates["sp-typeahead-" + source.id + ".html"] = $sp.translateTemplate(source.typeaheadTemplate);
		} else {
			sourceTemplateConfiguration.type = "SIMPLE";
			if (!sourceTemplateConfiguration.linkToPage)
			console.log("Warning: No typeahead page or URL provided for search source " + source.name);
		}

		data.searchSourceConfiguration[source.id] = sourceTemplateConfiguration;
	});
})();]]&gt;&lt;/script&gt;&lt;servicenow&gt;true&lt;/servicenow&gt;&lt;sys_class_name&gt;sp_widget&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2015-08-12 00:47:31&lt;/sys_created_on&gt;&lt;sys_id&gt;fa20ec02cb31020000f8d856634c9ce9&lt;/sys_id&gt;&lt;sys_mod_count&gt;859&lt;/sys_mod_count&gt;&lt;sys_name&gt;Typeahead Search&lt;/sys_name&gt;&lt;sys_package display_value="Service Portal - Core" source="com.glide.service-portal"&gt;44efe504db350010fa11cf2414961981&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;&lt;sys_update_name&gt;sp_widget_fa20ec02cb31020000f8d856634c9ce9&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2019-10-28 05:49:08&lt;/sys_updated_on&gt;&lt;template&gt;&lt;![CDATA[&lt;form ng-submit="c.submitSearch()"&gt;
  &lt;input type="hidden" name="id" value="search"/&gt;
  &lt;input type="hidden" name="t" value="{{c.searchType}}"/&gt;
  &lt;div class="input-group input-group-{{::c.options.size}}"&gt;
    &lt;!-- uses ui.bootstrap.typeahead --&gt;
    &lt;input ng-if="c.showSuggestions"
           name="q" type="text" placeholder="{{::c.options.title}}" ng-model="c.searchTerm"
           autocomplete="off"
           uib-typeahead="item as item.term for item in c.getSearchSuggestions($viewValue)"
           typeahead-wait-ms="250"
           typeahead-min-length="1"
           typeahead-focus-first="false"
           typeahead-on-select="c.onSelect($item, $model, $label)"
           typeahead-template-url="sp-typeahead.html"
           typeahead-popup-template-url="sp-typeahead-popup.html"
           class="form-control input-typeahead"
           role="textbox"
           aria-label="{{::c.options.title}}" tabindex="0" aria-haspopup="true"&gt;
    &lt;input ng-if="!c.showSuggestions"
           name="q" type="text" placeholder="{{::c.options.title}}" ng-model="c.searchTerm"
           autocomplete="off"
           uib-typeahead="item as item.primary for item in c.getResults($viewValue)"
           typeahead-wait-ms="250"
           typeahead-min-length="2"
           typeahead-focus-first="false"
           typeahead-on-select="c.onSelect($item, $model, $label)"
           typeahead-template-url="sp-typeahead.html"
           typeahead-popup-template-url="sp-typeahead-popup.html"
           class="form-control input-typeahead"
           role="textbox"
           aria-label="{{::c.options.title}}" tabindex="0" aria-haspopup="true"&gt;
    &lt;span class="input-group-btn"&gt;
      &lt;button name="search" type="submit" class="btn btn-{{::c.options.color}}"
              title="{{::c.data.searchMsg}}" aria-label="{{::c.data.searchMsg}}"&gt;
    	&lt;i ng-if="::c.options.glyph" class="fa fa-{{::c.options.glyph}}"&gt;&lt;/i&gt;
      &lt;/button&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/form&gt;]]&gt;&lt;/template&gt;&lt;/sp_widget&gt;</payload><sys_class_name>sp_rel_widget_clone</sys_class_name><sys_created_by>organize.henrique</sys_created_by><sys_created_on>2020-06-19 12:12:48</sys_created_on><sys_id>00d76df0dbed90105c116390149619a6</sys_id><sys_mod_count>0</sys_mod_count><sys_name>7fc76df0dbed90105c116390149619a2</sys_name><sys_package display_value="ITSM Service Portal" source="x_gmeps_itsm_servi">334ae627dbc85c105c1163901496192f</sys_package><sys_policy/><sys_scope display_value="ITSM Service Portal">334ae627dbc85c105c1163901496192f</sys_scope><sys_update_name>sp_rel_widget_clone_00d76df0dbed90105c116390149619a6</sys_update_name><sys_updated_by>organize.henrique</sys_updated_by><sys_updated_on>2020-06-19 12:12:48</sys_updated_on></sp_rel_widget_clone></record_update>]]></payload>
        <payload_hash>1043916302</payload_hash>
        <record_name>7fc76df0dbed90105c116390149619a2</record_name>
        <reverted_from/>
        <source>0ffdd18cdb51dc905c116390149619c3</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>organize.henrique</sys_created_by>
        <sys_created_on>2020-06-19 12:12:48</sys_created_on>
        <sys_id>84d76df0dbed90105c116390149619a8</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>172cc7ee8350000001</sys_recorded_at>
        <sys_updated_by>organize.henrique</sys_updated_by>
        <sys_updated_on>2020-06-19 12:12:48</sys_updated_on>
        <type>Widget Clone</type>
        <update_guid>8cd76df006ed90106fae670f3b2169a7</update_guid>
        <update_guid_history>8cd76df006ed90106fae670f3b2169a7:1043916302</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete display_value="">831e2134db21d0105c1163901496196d</sys_audit_delete>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>organize.henrique</sys_created_by>
        <sys_created_on>2020-06-19 12:40:19</sys_created_on>
        <sys_db_object display_value="" name="sp_rel_widget_clone">sp_rel_widget_clone</sys_db_object>
        <sys_id>02c4e046ab04460c90072b2c60d53d04</sys_id>
        <sys_metadata>00d76df0dbed90105c116390149619a6</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>7fc76df0dbed90105c116390149619a2</sys_name>
        <sys_package display_value="ITSM Service Portal" source="x_gmeps_itsm_servi">334ae627dbc85c105c1163901496192f</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="ITSM Service Portal">334ae627dbc85c105c1163901496192f</sys_scope>
        <sys_scope_delete display_value="">0df1a4379dc4442b9d37a43c61c804b1</sys_scope_delete>
        <sys_update_name>sp_rel_widget_clone_00d76df0dbed90105c116390149619a6</sys_update_name>
        <sys_update_version display_value="sp_rel_widget_clone_00d76df0dbed90105c116390149619a6">84d76df0dbed90105c116390149619a8</sys_update_version>
        <sys_updated_by>organize.henrique</sys_updated_by>
        <sys_updated_on>2020-06-19 12:40:19</sys_updated_on>
    </sys_metadata_delete>
</record_update>
