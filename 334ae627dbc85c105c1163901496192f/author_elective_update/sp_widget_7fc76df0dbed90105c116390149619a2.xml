<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="DELETE">
        <category>custom</category>
        <client_script><![CDATA[function ($http, $filter, $location,spAriaUtil, $window, $scope, spAriaFocusManager, $rootScope) {
	var c = this;
	c.options.glyph = c.options.glyph || 'search';
	c.options.title = c.options.title || c.data.searchMsg;
	c.options.color = c.options.color || "default";
	c.searchTerm = c.data.q;
	c.showClear = false;
	c.pageID = $scope.page.id;
	c.showSuggestions =  c.data.searchTypeBehavior === "suggestions" && c.data.isSuggestionsEnabled === "true";

	c.onSelect = function($item, $model, $label) {
		c.searchTerm = $item; // prevents unexpected result if user quickly clicks search button after selecting
		c.submitSearch();
	};

	c.getSearchSuggestions = function(query) {	 
		if ($location.search().q == query)
			return;
		var payload = {
			params: {
				"sysparm_term" : query, 
				"sysparm_sp_portal_id": c.data.portalID,
				"sysparm_suggestions_limit": c.options.limit > 0 ? c.options.limit : "",
				"sysparm_search_sources": c.data.searchSourceSysIds || ""
			},
			headers : {'Accept' : 'application/json'}
		};

		var test = $http.get("/api/now/search/sp_suggestions", payload).then(function(response){ 
			var result = response.data.result;
			var resultCount = result != null ? result.entries.length : 0;
			sendLiveMessage(resultCount);

			return result.entries.map(function(item) {	
				item.query = getQueryToHighlight(item, query);
				item.glyph = getIcon(item.type);
				item.term = item.name;
				return item;	 
			});
		});
		return test;
	};

	function getSearchSources(result, c) {
		var sources = {};
		c.data.searchSources.map(function(key) {
			sources[key] = 0;
		});
		result.map(function(item) {
			if(sources[item.type])
				sources[item.type]++;
			else
				sources[item.type] = 1;
		});
		var searchSources = [];
		Object.keys(sources).map(function(key) {
			var source_id = c.data.searchSourceConfiguration[key] ? c.data.searchSourceConfiguration[key].sys_id : key;
			searchSources.push({
				source_id: source_id,
				number_of_results: sources[key]
			});
		});
		return searchSources;
	}

	c.TextSearchAnalyticsUpdateRank = function(rank) {
		var query = c.latestQuery;
		var result = _.get(c.data, 'results', []);
		var payloadObject = {
			action: "GlideSPSearchAnalyticsUpdateRank",
			payload: {
				query: query,
				portal_id: this.data.portalID,
				page_id: this.pageID,
				results_per_source: getSearchSources(result, this),
				refinement_occurred: false,
				click_rank: rank
			}
		};

		$window.spSearchAnalytics = {
			query: query,
			refinement_occurred: false
		};

		this.server.get(payloadObject);
	}

	// Attach event handler to update click rank
	// Run only once
	var attachClickRankHandler = function() {
		$(".typeahead-popup").on('click', 'li', function(e) {
			var index = $(this).data('index');
			c.TextSearchAnalyticsUpdateRank(index+1);
		});
		// Remove function definition
		// As soon as it was called
		attachClickRankHandler = function() {};
	}

	c.submitSearch = function(){
		c.getResults().then(function(response){
			if(c.searchTerm){
				c.showClear = true;
				$rootScope.$broadcast(c.data.broadcast_name, c.data.results, c.data.searchSourceID);
			}
		});


	};

	c.getResults = function() {
		var query = c.searchTerm;
		var payload = {
			"query": query,
			"portal": c.data.portalID,
			"page": c.pageID,
			"source": c.data.searchSources,
			"include_facets": false,
			"searchType": "typeahead"
		};

		attachClickRankHandler();

		if (c.options.limit || c.options.limit == 0)
			payload.count = c.options.limit;

		return $http.post("/api/now/sp/search", payload).then(function(response) {
			// Prevents typeahead from displaying suggestions if queries from page and input are the same
			if ($location.search().q == query)
				return;

			var result = response.data.result;
			var resultCount = result != null ? result.results.length : 0
			sendLiveMessage(resultCount);
			
			c.data.results = result.results;
			c.latestQuery = query;

			return result.results.map(function(item) {
				var config = c.data.searchSourceConfiguration[item.__search_source_id__];

				if (!item.url && config.linkToPage) {
					item.url = "?id=" + config.linkToPage;
					if (item.sys_id)
						item.url += "&sys_id=" + item.sys_id;
					if (item.table)
						item.url += "&table=" + item.table
				}

				if (config.type == "ADVANCED") {
					item.templateID = config.template;
				} else {
					item.glyph = config.glyph;
				}
				return item;
			});
		});
	}

	$scope.$on("clearAllFilters", function (event) {
		c.searchTerm = "";
		c.showClear = false;
		$rootScope.$broadcast(broadcastClear);
	});

	c.clearResults = function(){
		c.searchTerm = "";
		c.showClear = false;
		var broadcastClear = c.data.broadcast_name + "Clear";
		$rootScope.$broadcast(broadcastClear);
	}

	c.searchType = c.data.searchType;
	$scope.$on('$locationChangeSuccess', onLocationChangeSuccess);

	function onLocationChangeSuccess(event, newUrl, oldUrl) {
		if(searchSourceChanged(newUrl, oldUrl)) {
			var newUrlParams = newUrl.match(/t=.+/);
			if(!newUrlParams) {
				c.searchType = null;
			} else {
				c.searchType = newUrlParams[0].split("&")[0].substring(2);
			}
		}
	}

	function searchSourceChanged(newUrl, oldUrl) {
		var newUrlParams = newUrl.match(/t=.+/),
				oldUrlParams = oldUrl.match(/t=.+/);

		if(!newUrlParams && !oldUrlParams) {
			return false;
		}

		if((!newUrlParams && oldUrlParams) || (newUrlParams && !oldUrlParams)) {
			return true;
		}

		return newUrlParams[0].split("&")[0] !== oldUrlParams[0].split("&")[0];
	}

	function sendLiveMessage(resultCount) {
		spAriaUtil.sendLiveMessage(resultCount + " " +
															 c.data.resultMsg + " " +
															 (resultCount > 0 ? ' ' + c.data.navigationMsg : ''));
	}

	function getIcon(itemType) {
		return itemType === "INSTANCE_HISTORY" ? 'search' : 'clock-o';
	}

	function getQueryToHighlight(item, query) {
		return item.type === "INSTANCE_HISTORY" ? item.name.substring(query.length) : query;
	}
}]]></client_script>
        <controller_as>c</controller_as>
        <css>ul.dropdown-menu {
    min-width: 100%;
    border-radius: 0px 0px 4px 4px;
    margin:0px;
}

ul.dropdown-menu a.ta-item {
	line-height: 20px;
}

ul.dropdown-menu i.ta-icon, i.ta-img {
    width: 20px;
    height: 20px;
    background-size: contain;
    display: inline-block;
    background-repeat: no-repeat;
    background-position: center center;
    text-align: center;
    line-height: 20px;
    vertical-align: bottom;
    margin-right: 8px;
}

input[name="q"] {
color: black;
}

form{
	margin-top: 100px;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>henrique_test_typeahead</id>
        <internal>false</internal>
        <link><![CDATA[function(scope) {
	var lazyLoader = $injector.get("lazyLoader");
	lazyLoader.putTemplates(scope.data.typeaheadTemplates);
}]]></link>
        <name>Henrique Test Typeahead</name>
        <option_schema>[{"name":"title","section":"Presentation","label":"Title","type":"string"},{"name":"color","section":"Presentation","label":"Color","type":"string"},{"name":"glyph","section":"Presentation","label":"glyph","type":"string"},{"name":"size","section":"Presentation","label":"Size","type":"string"},{"hint":"Number of typeahead search results returned (default 15)","name":"limit","section":"Behavior","label":"Limit","type":"integer"},{"displayValue":"Search Source","hint":"If provided, limit the scope of the typeahead search to the given search sources","name":"contextual_search_sources","display_value_list":[],"section":"Behavior","label":"Contextual Search Sources","type":"glide_list","value":"sp_search_source","ed":{"reference":"sp_search_source"}}]</option_schema>
        <public>true</public>
        <roles/>
        <script><![CDATA[(function() {
	/*if (input && input.action === "GlideSPSearchAnalyticsUpdateRank") {
		input.action = "";
		var textSearchAnalytics = new GlideSPSearchAnalytics().publish(JSON.stringify(input.payload));
		return ;
	}*/
	var localInput = input;

	data.searchSourceID = "c96eb1686721220023c82e08f585efff";
	data.broadcast_name = options.broadcast_name;
	
	switch(data.broadcast_name){
		case "getSearchedItems":
		case "getSearchedItemsCategory":
			data.htmlTemplate = "gservice_typeahead_default"
			break;
		case "getSearchedItemsFilter":
			data.htmlTemplate = "gservice_typeahead_dashboard"
			break;
	}
	data.categoryColor = options.category_color;
	data.categoryBgColor = options.category_bg_color;
	data.categoryBdColor = options.category_bd_color;
	data.categorySearchImg = options.category_search_img;

	if (options.title) {
		options.title = gs.getMessage(options.title);
	}

	if (options.refresh_page_on_search_submission == undefined)
		data.refreshPageOnSearch = true;
	else
		data.refreshPageOnSearch = options.refresh_page_on_search_submission;

	data.resultMsg = gs.getMessage("Search results.");
	data.navigationMsg = gs.getMessage("To navigate, use up and down arrow keys.");
	data.portalID = $sp.getPortalRecord().getUniqueValue();
	data.searchMsg = gs.getMessage("Se preferir, faÃ§a uma busca");
	data.q = $sp.getParameter('q');

	data.isSuggestionsEnabled = gs.getProperty('glide.search.suggestions.enabled');
	data.searchTypeBehavior = gs.getProperty('glide.service_portal.search_as_you_type_behavior').toLowerCase();

	var searchSources;
	data.searchType = null;
	//Edited for test, it has to be a search source at the options;
	//data.searchType = null || options.filter_search_source;
	data.searchSources = [];
	if ($sp.getParameter("id") == "search" && $sp.getParameter("t")) {
		data.searchType = $sp.getParameter("t");
		//Edited for test, it has to be a search source at the options;
		//data.searchType = $sp.getParameter("t") || options.filter_search_source;
		searchSources = $sp.getSearchSources(data.portalID);
	} else {
		var contextualSearchSourceIDs = options.contextual_search_sources || null;
		
		searchSources = $sp.getSearchSources(data.portalID, contextualSearchSourceIDs);
		data.test = searchSources;
		if (searchSources.length == 1) {
			data.searchType = searchSources[0].id;
		}
	}

	data.searchSourceSysIds = [];
	data.typeaheadTemplates = {};
	data.searchSourceConfiguration = {};
	searchSources.forEach(function(source) {
		data.searchSourceSysIds.push(source.sys_id);
		if (source.isTypeaheadEnabled) {
			data.searchSources.push(source.id);
		}
		var sourceTemplateConfiguration = {
			sys_id: source.sys_id,
			glyph: source.typeaheadGlyph,
			linkToPage: source.typeaheadPage
		};

		if (source.isAdvancedTypeaheadConfig) {
			sourceTemplateConfiguration.type = "ADVANCED";
			sourceTemplateConfiguration.template = "sp-typeahead-" + source.id + ".html";
			data.typeaheadTemplates["sp-typeahead-" + source.id + ".html"] = $sp.translateTemplate(source.typeaheadTemplate);
		} else {
			sourceTemplateConfiguration.type = "SIMPLE";
			if (!sourceTemplateConfiguration.linkToPage)
				console.log("Warning: No typeahead page or URL provided for search source " + source.name);
		}

		data.searchSourceConfiguration[source.id] = sourceTemplateConfiguration;
	});

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>organize.henrique</sys_created_by>
        <sys_created_on>2020-06-19 12:12:48</sys_created_on>
        <sys_id>7fc76df0dbed90105c116390149619a2</sys_id>
        <sys_mod_count>11</sys_mod_count>
        <sys_name>Henrique Test Typeahead</sys_name>
        <sys_package display_value="ITSM Service Portal" source="x_gmeps_itsm_servi">334ae627dbc85c105c1163901496192f</sys_package>
        <sys_policy/>
        <sys_scope display_value="ITSM Service Portal">334ae627dbc85c105c1163901496192f</sys_scope>
        <sys_update_name>sp_widget_7fc76df0dbed90105c116390149619a2</sys_update_name>
        <sys_updated_by>organize.henrique</sys_updated_by>
        <sys_updated_on>2020-06-19 12:32:25</sys_updated_on>
        <template><![CDATA[<div class="content_typeahead_home">
  <form ng-submit="c.submitSearch()">
    <input type="hidden" name="id" value="search"/>
    <input type="hidden" name="t" value="{{c.searchType}}"/>
    <div class="input-group input-group-{{::c.options.size}} {{data.categoryBdColor}} default_properties">
      <span class="input-group-btn">
        <button name="search" type="submit" class="btn btn-{{::c.options.color}}"
                title="{{::c.data.searchMsg}}" aria-label="{{::c.data.searchMsg}}">
          <img src="{{data.categorySearchImg}}" class="icon-img"/>
        </button>
      </span>
      <input ng-if="c.showSuggestions"
             name="q" type="text" ng-model="c.searchTerm"
             autocomplete="off"
             uib-typeahead="item as item.term for item in c.getSearchSuggestions($viewValue)"
             typeahead-wait-ms="250"
             typeahead-min-length="1"
             typeahead-focus-first="false"
             typeahead-on-select="c.onSelect($item, $model, $label)"
             typeahead-template-url="gservice-typeahead.html"
             typeahead-popup-template-url="gservice-typeahead-popup.html"
             class="form-control input-typeahead"
             role="textbox"
             aria-label="{{::c.options.title}}" tabindex="0" aria-haspopup="true">
      <div class="close_result" ng-click="c.clearResults()" ng-if="c.showClear"> <!-- ng-class="c.options.color == 'default' ? 'close_result-default' : 'close_result'" -->
        x
        <span class="tooltip tooltip_top">
          <div class="tooltip_text">${Clean Search}</div>
          <div class="tooltip_arrow arrow_bottom"></div>
        </span>
      </div>
    </div>
    <div class="text-left">
      {{data.searchMsg}}
    </div>
  </form>
</div>
<pre>
  {{data.results | json}}
</pre>]]></template>
    </sp_widget>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="ITSM Service Portal">334ae627dbc85c105c1163901496192f</application>
        <file_path/>
        <instance_id>cf5b95b4dba4bb0007072f17d496195a</instance_id>
        <instance_name>globosatdev</instance_name>
        <name>sp_widget_7fc76df0dbed90105c116390149619a2</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sp_widget"&gt;&lt;sp_widget action="INSERT_OR_UPDATE"&gt;&lt;category&gt;custom&lt;/category&gt;&lt;client_script&gt;&lt;![CDATA[function ($http, $filter, $location,spAriaUtil, $window, $scope, spAriaFocusManager, $rootScope) {
	var c = this;
	c.options.glyph = c.options.glyph || 'search';
	c.options.title = c.options.title || c.data.searchMsg;
	c.options.color = c.options.color || "default";
	c.searchTerm = c.data.q;
	c.showClear = false;
	c.pageID = $scope.page.id;
	c.showSuggestions =  c.data.searchTypeBehavior === "suggestions" &amp;&amp; c.data.isSuggestionsEnabled === "true";

	c.onSelect = function($item, $model, $label) {
		c.searchTerm = $item; // prevents unexpected result if user quickly clicks search button after selecting
		c.submitSearch();
	};

	c.getSearchSuggestions = function(query) {	 
		if ($location.search().q == query)
			return;
		var payload = {
			params: {
				"sysparm_term" : query, 
				"sysparm_sp_portal_id": c.data.portalID,
				"sysparm_suggestions_limit": c.options.limit &gt; 0 ? c.options.limit : "",
				"sysparm_search_sources": c.data.searchSourceSysIds || ""
			},
			headers : {'Accept' : 'application/json'}
		};

		var test = $http.get("/api/now/search/sp_suggestions", payload).then(function(response){ 
			var result = response.data.result;
			var resultCount = result != null ? result.entries.length : 0;
			sendLiveMessage(resultCount);

			return result.entries.map(function(item) {	
				item.query = getQueryToHighlight(item, query);
				item.glyph = getIcon(item.type);
				item.term = item.name;
				return item;	 
			});
		});
		return test;
	};

	function getSearchSources(result, c) {
		var sources = {};
		c.data.searchSources.map(function(key) {
			sources[key] = 0;
		});
		result.map(function(item) {
			if(sources[item.type])
				sources[item.type]++;
			else
				sources[item.type] = 1;
		});
		var searchSources = [];
		Object.keys(sources).map(function(key) {
			var source_id = c.data.searchSourceConfiguration[key] ? c.data.searchSourceConfiguration[key].sys_id : key;
			searchSources.push({
				source_id: source_id,
				number_of_results: sources[key]
			});
		});
		return searchSources;
	}

	c.TextSearchAnalyticsUpdateRank = function(rank) {
		var query = c.latestQuery;
		var result = _.get(c.data, 'results', []);
		var payloadObject = {
			action: "GlideSPSearchAnalyticsUpdateRank",
			payload: {
				query: query,
				portal_id: this.data.portalID,
				page_id: this.pageID,
				results_per_source: getSearchSources(result, this),
				refinement_occurred: false,
				click_rank: rank
			}
		};

		$window.spSearchAnalytics = {
			query: query,
			refinement_occurred: false
		};

		this.server.get(payloadObject);
	}

	// Attach event handler to update click rank
	// Run only once
	var attachClickRankHandler = function() {
		$(".typeahead-popup").on('click', 'li', function(e) {
			var index = $(this).data('index');
			c.TextSearchAnalyticsUpdateRank(index+1);
		});
		// Remove function definition
		// As soon as it was called
		attachClickRankHandler = function() {};
	}

	c.submitSearch = function(){
		c.getResults().then(function(response){
			if(c.searchTerm){
				c.showClear = true;
				$rootScope.$broadcast(c.data.broadcast_name, c.data.results, c.data.searchSourceID);
			}
		});


	};

	c.getResults = function() {
		var query = c.searchTerm;
		var payload = {
			"query": query,
			"portal": c.data.portalID,
			"page": c.pageID,
			"source": c.data.searchSources,
			"include_facets": false,
			"searchType": "typeahead"
		};

		attachClickRankHandler();

		if (c.options.limit || c.options.limit == 0)
			payload.count = c.options.limit;

		return $http.post("/api/now/sp/search", payload).then(function(response) {
			// Prevents typeahead from displaying suggestions if queries from page and input are the same
			if ($location.search().q == query)
				return;

			var result = response.data.result;
			var resultCount = result != null ? result.results.length : 0
			sendLiveMessage(resultCount);
			
			c.data.results = result.results;
			c.latestQuery = query;

			return result.results.map(function(item) {
				var config = c.data.searchSourceConfiguration[item.__search_source_id__];

				if (!item.url &amp;&amp; config.linkToPage) {
					item.url = "?id=" + config.linkToPage;
					if (item.sys_id)
						item.url += "&amp;sys_id=" + item.sys_id;
					if (item.table)
						item.url += "&amp;table=" + item.table
				}

				if (config.type == "ADVANCED") {
					item.templateID = config.template;
				} else {
					item.glyph = config.glyph;
				}
				return item;
			});
		});
	}

	$scope.$on("clearAllFilters", function (event) {
		c.searchTerm = "";
		c.showClear = false;
		$rootScope.$broadcast(broadcastClear);
	});

	c.clearResults = function(){
		c.searchTerm = "";
		c.showClear = false;
		var broadcastClear = c.data.broadcast_name + "Clear";
		$rootScope.$broadcast(broadcastClear);
	}

	c.searchType = c.data.searchType;
	$scope.$on('$locationChangeSuccess', onLocationChangeSuccess);

	function onLocationChangeSuccess(event, newUrl, oldUrl) {
		if(searchSourceChanged(newUrl, oldUrl)) {
			var newUrlParams = newUrl.match(/t=.+/);
			if(!newUrlParams) {
				c.searchType = null;
			} else {
				c.searchType = newUrlParams[0].split("&amp;")[0].substring(2);
			}
		}
	}

	function searchSourceChanged(newUrl, oldUrl) {
		var newUrlParams = newUrl.match(/t=.+/),
				oldUrlParams = oldUrl.match(/t=.+/);

		if(!newUrlParams &amp;&amp; !oldUrlParams) {
			return false;
		}

		if((!newUrlParams &amp;&amp; oldUrlParams) || (newUrlParams &amp;&amp; !oldUrlParams)) {
			return true;
		}

		return newUrlParams[0].split("&amp;")[0] !== oldUrlParams[0].split("&amp;")[0];
	}

	function sendLiveMessage(resultCount) {
		spAriaUtil.sendLiveMessage(resultCount + " " +
															 c.data.resultMsg + " " +
															 (resultCount &gt; 0 ? ' ' + c.data.navigationMsg : ''));
	}

	function getIcon(itemType) {
		return itemType === "INSTANCE_HISTORY" ? 'search' : 'clock-o';
	}

	function getQueryToHighlight(item, query) {
		return item.type === "INSTANCE_HISTORY" ? item.name.substring(query.length) : query;
	}
}]]&gt;&lt;/client_script&gt;&lt;controller_as&gt;c&lt;/controller_as&gt;&lt;css&gt;ul.dropdown-menu {
    min-width: 100%;
    border-radius: 0px 0px 4px 4px;
    margin:0px;
}

ul.dropdown-menu a.ta-item {
	line-height: 20px;
}

ul.dropdown-menu i.ta-icon, i.ta-img {
    width: 20px;
    height: 20px;
    background-size: contain;
    display: inline-block;
    background-repeat: no-repeat;
    background-position: center center;
    text-align: center;
    line-height: 20px;
    vertical-align: bottom;
    margin-right: 8px;
}

input[name="q"] {
color: black;
}

form{
	margin-top: 100px;
}&lt;/css&gt;&lt;data_table&gt;sp_instance&lt;/data_table&gt;&lt;demo_data/&gt;&lt;description/&gt;&lt;docs/&gt;&lt;field_list/&gt;&lt;has_preview&gt;false&lt;/has_preview&gt;&lt;id&gt;henrique_test_typeahead&lt;/id&gt;&lt;internal&gt;false&lt;/internal&gt;&lt;link&gt;&lt;![CDATA[function(scope) {
	var lazyLoader = $injector.get("lazyLoader");
	lazyLoader.putTemplates(scope.data.typeaheadTemplates);
}]]&gt;&lt;/link&gt;&lt;name&gt;Henrique Test Typeahead&lt;/name&gt;&lt;option_schema&gt;[{"name":"title","section":"Presentation","label":"Title","type":"string"},{"name":"color","section":"Presentation","label":"Color","type":"string"},{"name":"glyph","section":"Presentation","label":"glyph","type":"string"},{"name":"size","section":"Presentation","label":"Size","type":"string"},{"hint":"Number of typeahead search results returned (default 15)","name":"limit","section":"Behavior","label":"Limit","type":"integer"},{"displayValue":"Search Source","hint":"If provided, limit the scope of the typeahead search to the given search sources","name":"contextual_search_sources","display_value_list":[],"section":"Behavior","label":"Contextual Search Sources","type":"glide_list","value":"sp_search_source","ed":{"reference":"sp_search_source"}}]&lt;/option_schema&gt;&lt;public&gt;true&lt;/public&gt;&lt;roles/&gt;&lt;script&gt;&lt;![CDATA[(function() {
	/*if (input &amp;&amp; input.action === "GlideSPSearchAnalyticsUpdateRank") {
		input.action = "";
		var textSearchAnalytics = new GlideSPSearchAnalytics().publish(JSON.stringify(input.payload));
		return ;
	}*/
	var localInput = input;

	data.searchSourceID = "c96eb1686721220023c82e08f585efff";
	data.broadcast_name = options.broadcast_name;
	
	switch(data.broadcast_name){
		case "getSearchedItems":
		case "getSearchedItemsCategory":
			data.htmlTemplate = "gservice_typeahead_default"
			break;
		case "getSearchedItemsFilter":
			data.htmlTemplate = "gservice_typeahead_dashboard"
			break;
	}
	data.categoryColor = options.category_color;
	data.categoryBgColor = options.category_bg_color;
	data.categoryBdColor = options.category_bd_color;
	data.categorySearchImg = options.category_search_img;

	if (options.title) {
		options.title = gs.getMessage(options.title);
	}

	if (options.refresh_page_on_search_submission == undefined)
		data.refreshPageOnSearch = true;
	else
		data.refreshPageOnSearch = options.refresh_page_on_search_submission;

	data.resultMsg = gs.getMessage("Search results.");
	data.navigationMsg = gs.getMessage("To navigate, use up and down arrow keys.");
	data.portalID = $sp.getPortalRecord().getUniqueValue();
	data.searchMsg = gs.getMessage("Se preferir, faÃ§a uma busca");
	data.q = $sp.getParameter('q');

	data.isSuggestionsEnabled = gs.getProperty('glide.search.suggestions.enabled');
	data.searchTypeBehavior = gs.getProperty('glide.service_portal.search_as_you_type_behavior').toLowerCase();

	var searchSources;
	data.searchType = null;
	//Edited for test, it has to be a search source at the options;
	//data.searchType = null || options.filter_search_source;
	data.searchSources = [];
	if ($sp.getParameter("id") == "search" &amp;&amp; $sp.getParameter("t")) {
		data.searchType = $sp.getParameter("t");
		//Edited for test, it has to be a search source at the options;
		//data.searchType = $sp.getParameter("t") || options.filter_search_source;
		searchSources = $sp.getSearchSources(data.portalID);
	} else {
		var contextualSearchSourceIDs = options.contextual_search_sources || null;
		
		searchSources = $sp.getSearchSources(data.portalID, contextualSearchSourceIDs);
		data.test = searchSources;
		if (searchSources.length == 1) {
			data.searchType = searchSources[0].id;
		}
	}

	data.searchSourceSysIds = [];
	data.typeaheadTemplates = {};
	data.searchSourceConfiguration = {};
	searchSources.forEach(function(source) {
		data.searchSourceSysIds.push(source.sys_id);
		if (source.isTypeaheadEnabled) {
			data.searchSources.push(source.id);
		}
		var sourceTemplateConfiguration = {
			sys_id: source.sys_id,
			glyph: source.typeaheadGlyph,
			linkToPage: source.typeaheadPage
		};

		if (source.isAdvancedTypeaheadConfig) {
			sourceTemplateConfiguration.type = "ADVANCED";
			sourceTemplateConfiguration.template = "sp-typeahead-" + source.id + ".html";
			data.typeaheadTemplates["sp-typeahead-" + source.id + ".html"] = $sp.translateTemplate(source.typeaheadTemplate);
		} else {
			sourceTemplateConfiguration.type = "SIMPLE";
			if (!sourceTemplateConfiguration.linkToPage)
				console.log("Warning: No typeahead page or URL provided for search source " + source.name);
		}

		data.searchSourceConfiguration[source.id] = sourceTemplateConfiguration;
	});

})();]]&gt;&lt;/script&gt;&lt;servicenow&gt;false&lt;/servicenow&gt;&lt;sys_class_name&gt;sp_widget&lt;/sys_class_name&gt;&lt;sys_created_by&gt;organize.henrique&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-06-19 12:12:48&lt;/sys_created_on&gt;&lt;sys_id&gt;7fc76df0dbed90105c116390149619a2&lt;/sys_id&gt;&lt;sys_mod_count&gt;11&lt;/sys_mod_count&gt;&lt;sys_name&gt;Henrique Test Typeahead&lt;/sys_name&gt;&lt;sys_package display_value="ITSM Service Portal" source="x_gmeps_itsm_servi"&gt;334ae627dbc85c105c1163901496192f&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="ITSM Service Portal"&gt;334ae627dbc85c105c1163901496192f&lt;/sys_scope&gt;&lt;sys_update_name&gt;sp_widget_7fc76df0dbed90105c116390149619a2&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;organize.henrique&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2020-06-19 12:32:25&lt;/sys_updated_on&gt;&lt;template&gt;&lt;![CDATA[&lt;div class="content_typeahead_home"&gt;
  &lt;form ng-submit="c.submitSearch()"&gt;
    &lt;input type="hidden" name="id" value="search"/&gt;
    &lt;input type="hidden" name="t" value="{{c.searchType}}"/&gt;
    &lt;div class="input-group input-group-{{::c.options.size}} {{data.categoryBdColor}} default_properties"&gt;
      &lt;span class="input-group-btn"&gt;
        &lt;button name="search" type="submit" class="btn btn-{{::c.options.color}}"
                title="{{::c.data.searchMsg}}" aria-label="{{::c.data.searchMsg}}"&gt;
          &lt;img src="{{data.categorySearchImg}}" class="icon-img"/&gt;
        &lt;/button&gt;
      &lt;/span&gt;
      &lt;input ng-if="c.showSuggestions"
             name="q" type="text" ng-model="c.searchTerm"
             autocomplete="off"
             uib-typeahead="item as item.term for item in c.getSearchSuggestions($viewValue)"
             typeahead-wait-ms="250"
             typeahead-min-length="1"
             typeahead-focus-first="false"
             typeahead-on-select="c.onSelect($item, $model, $label)"
             typeahead-template-url="gservice-typeahead.html"
             typeahead-popup-template-url="gservice-typeahead-popup.html"
             class="form-control input-typeahead"
             role="textbox"
             aria-label="{{::c.options.title}}" tabindex="0" aria-haspopup="true"&gt;
      &lt;div class="close_result" ng-click="c.clearResults()" ng-if="c.showClear"&gt; &lt;!-- ng-class="c.options.color == 'default' ? 'close_result-default' : 'close_result'" --&gt;
        x
        &lt;span class="tooltip tooltip_top"&gt;
          &lt;div class="tooltip_text"&gt;${Clean Search}&lt;/div&gt;
          &lt;div class="tooltip_arrow arrow_bottom"&gt;&lt;/div&gt;
        &lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="text-left"&gt;
      {{data.searchMsg}}
    &lt;/div&gt;
  &lt;/form&gt;
&lt;/div&gt;
&lt;pre&gt;
  {{data.results | json}}
&lt;/pre&gt;]]&gt;&lt;/template&gt;&lt;/sp_widget&gt;&lt;/record_update&gt;</payload>
        <payload_hash>1646975250</payload_hash>
        <record_name>Henrique Test Typeahead</record_name>
        <reverted_from/>
        <source>0ffdd18cdb51dc905c116390149619c3</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>organize.henrique</sys_created_by>
        <sys_created_on>2020-06-19 12:32:25</sys_created_on>
        <sys_id>174c6dfcdbed90105c116390149619e5</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>172cc90dd260000001</sys_recorded_at>
        <sys_updated_by>organize.henrique</sys_updated_by>
        <sys_updated_on>2020-06-19 12:32:25</sys_updated_on>
        <type>Widget</type>
        <update_guid>db4c6dfc09ed9010c65fbe6a421e52e4</update_guid>
        <update_guid_history>db4c6dfc09ed9010c65fbe6a421e52e4:1646975250,bf1c65fcbced90109d95e0efbe3b8fd3:157043538,c70c61bc13ed90103b0c6e44de0b1871:2024252230,08bba1bc6bed901006de9abd10d14d41:-826523706,ec8ba1bc9bed9010b7e90b112e54af0a:-803760302,ec3b297c45ed9010b6c2105511421b71:1871808101,8b9a253c42ed9010296eaaa6d8afde23:-1902790192,300aa5788fed90100d9937e721bd97c2:503301570,1029e9f42eed90107d89aa71b6985784:-184638196,5109a1f4b7ed9010ca95e711abf11e79:-195708935,1ba8e574a9ed90103bae672d68e08e31:2107846330,08d76df0bbed90108c1b32caa9d959a4:98786849</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete display_value="">c31e6134db21d0105c11639014961983</sys_audit_delete>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>organize.henrique</sys_created_by>
        <sys_created_on>2020-06-19 12:40:19</sys_created_on>
        <sys_db_object display_value="" name="sp_widget">sp_widget</sys_db_object>
        <sys_id>20cbf00506cc4e9e86f4353aa3495059</sys_id>
        <sys_metadata>7fc76df0dbed90105c116390149619a2</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Henrique Test Typeahead</sys_name>
        <sys_package display_value="ITSM Service Portal" source="x_gmeps_itsm_servi">334ae627dbc85c105c1163901496192f</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="ITSM Service Portal">334ae627dbc85c105c1163901496192f</sys_scope>
        <sys_scope_delete display_value="">0df1a4379dc4442b9d37a43c61c804b1</sys_scope_delete>
        <sys_update_name>sp_widget_7fc76df0dbed90105c116390149619a2</sys_update_name>
        <sys_update_version display_value="sp_widget_7fc76df0dbed90105c116390149619a2">174c6dfcdbed90105c116390149619e5</sys_update_version>
        <sys_updated_by>organize.henrique</sys_updated_by>
        <sys_updated_on>2020-06-19 12:40:19</sys_updated_on>
    </sys_metadata_delete>
</record_update>
